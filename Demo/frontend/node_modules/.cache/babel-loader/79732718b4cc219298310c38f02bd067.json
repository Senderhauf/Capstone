{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n *  Copyright (c) 2015-present, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\nvar _underscore = require(\"underscore\");\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nvar _merge = require(\"merge\");\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _pondjs = require(\"pondjs\");\n\nvar _curve = require(\"../js/curve\");\n\nvar _curve2 = _interopRequireDefault(_curve);\n\nvar _styler = require(\"../js/styler\");\n\nvar _util = require(\"../js/util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar defaultFillStyle = {\n  fill: \"steelblue\",\n  stroke: \"none\"\n};\nvar defaultMutedStyle = {\n  fill: \"grey\",\n  stroke: \"none\"\n};\nvar defaultStyle = [{\n  normal: _extends({}, defaultFillStyle, {\n    opacity: 0.2\n  }),\n  highlighted: _extends({}, defaultFillStyle, {\n    opacity: 0.3\n  }),\n  selected: _extends({}, defaultFillStyle, {\n    opacity: 0.3\n  }),\n  muted: _extends({}, defaultMutedStyle, {\n    opacity: 0.1\n  })\n}, {\n  normal: _extends({}, defaultFillStyle, {\n    opacity: 0.5\n  }),\n  highlighted: _extends({}, defaultFillStyle, {\n    opacity: 0.6\n  }),\n  selected: _extends({}, defaultFillStyle, {\n    opacity: 0.6\n  }),\n  muted: _extends({}, defaultMutedStyle, {\n    opacity: 0.2\n  })\n}, {\n  normal: _extends({}, defaultFillStyle, {\n    opacity: 0.9\n  }),\n  highlighted: _extends({}, defaultFillStyle, {\n    opacity: 1.0\n  }),\n  selected: _extends({}, defaultFillStyle, {\n    opacity: 1.0\n  }),\n  muted: _extends({}, defaultMutedStyle, {\n    opacity: 0.2\n  })\n}];\nvar defaultAggregation = {\n  size: \"5m\",\n  reducers: {\n    outer: [(0, _pondjs.min)(), (0, _pondjs.max)()],\n    inner: [(0, _pondjs.percentile)(25), (0, _pondjs.percentile)(75)],\n    center: (0, _pondjs.median)()\n  }\n};\n\nfunction getSeries(series, column) {\n  return series.map(function (e) {\n    var v = e.get(column);\n    var d = {};\n\n    switch (v.length) {\n      case 1:\n        d.center = v[0];\n        break;\n\n      case 2:\n        d.innerMin = v[0];\n        d.innerMax = v[1];\n        break;\n\n      case 3:\n        d.innerMin = v[0];\n        d.center = v[1];\n        d.innerMax = v[2];\n        break;\n\n      case 4:\n        d.outerMin = v[0];\n        d.innerMin = v[1];\n        d.innerMax = v[2];\n        d.outerMax = v[3];\n        break;\n\n      case 5:\n        d.outerMin = v[0];\n        d.innerMin = v[1];\n        d.center = v[2];\n        d.innerMax = v[3];\n        d.outerMax = v[4];\n        break;\n\n      default:\n        console.error(\"Tried to make boxchart from invalid array\");\n    }\n\n    var ee = new _pondjs.IndexedEvent(e.index(), d);\n    return ee;\n  });\n}\n\nfunction getAggregatedSeries(series, column) {\n  var aggregation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultAggregation;\n  var size = aggregation.size,\n      reducers = aggregation.reducers;\n  var inner = reducers.inner,\n      outer = reducers.outer,\n      center = reducers.center;\n\n  function mapColumn(c, r) {\n    var obj = {};\n    obj[c] = r;\n    return obj;\n  }\n\n  var fixedWindowAggregation = {};\n\n  if (inner) {\n    fixedWindowAggregation.innerMin = mapColumn(column, inner[0]);\n    fixedWindowAggregation.innerMax = mapColumn(column, inner[1]);\n  }\n\n  if (outer) {\n    fixedWindowAggregation.outerMin = mapColumn(column, outer[0]);\n    fixedWindowAggregation.outerMax = mapColumn(column, outer[1]);\n  }\n\n  if (center) {\n    fixedWindowAggregation.center = mapColumn(column, center);\n  }\n\n  return series.fixedWindowRollup({\n    windowSize: size,\n    aggregation: fixedWindowAggregation\n  });\n}\n/**\n * Renders a band chart.\n *\n * The TimeSeries supplied to the band chart, as the `series` prop can be one of two types:\n *\n *  1) It can be a TimeSeries containing IndexedEvents or TimeRangeEvents.\n *     In this case a `column` prop should be supplied to specify the\n *     data column containing the dimensions of the boxes. This props\n *     should be an array of size 1 to 5 elements. e.g. [12, 18, 22, 28]. The\n *     numbers should be ordered, lowest to greatest.\n *\n *  2) A TimeSeries containing timestamp based Events. In this case the\n *     band chart will be aggregated for you. To control the aggregation you can supply\n *     an `aggregation` prop: a structure to specify the window size and\n *     reducers used to determine the boxes.\n *\n * In both cases you are generating up to two ranges and a center marker. In the\n * first case you are defining this based on the array of numbers. The outer numbers\n * specify the outerRange, the inner numbers specify the innerRange and the middle\n * number specifies the center marker. In the second case you are building those ranges\n * from denser data, specifying a window and aggregation functions to build each\n * of the ranges and center maker.\n *\n * In both cases you do not need to supply all the values. For example if you\n * provide an array of 2 elements, that would define a single range, with no outer range\n * and no center marker. The Band Chart is pretty flexible in that way, so you\n * can use it in many situations.\n *\n * Here is an example of using it to display temperature ranges. The series\n * passed to this code would be a TimeSeries containing IndexedEvents. For\n * each event, the column `temp` contains an array of values used for the\n * box plot ranges:\n *\n * ```\n *     <BandChart\n *       axis=\"temperatureAxis\"\n *       style={style}\n *       column=\"temp\"\n *       series={series} />\n * ```\n *\n * While here is an example with a dense TimeSeries of Events supplied,\n * along with an aggregation specification. This code would produce an\n * outer range from the 5th percentile to the 95th, along with an inner\n * range for the interquantile, and a center marker at the median:\n *\n * ```\n *    <BandChart\n *      axis=\"speedaxis\"\n *      series={speed}\n *      column=\"speed\"\n *      style={style}\n *      aggregation={{\n *        size: this.state.rollup,\n *        reducers: {\n *          outer: [percentile(5), percentile(95)],\n *          inner: [percentile(25), percentile(75)],\n *          center: median(),\n *        },\n *      }}\n *    />\n * ```\n */\n\n\nvar BandChart = function (_React$Component) {\n  _inherits(BandChart, _React$Component);\n\n  function BandChart(props) {\n    _classCallCheck(this, BandChart);\n\n    var _this = _possibleConstructorReturn(this, (BandChart.__proto__ || Object.getPrototypeOf(BandChart)).call(this, props));\n\n    if (props.series._collection._type === _pondjs.TimeEvent // eslint-disable-line\n    ) {\n        _this.series = getAggregatedSeries(props.series, props.column, props.aggregation);\n      } else {\n      _this.series = getSeries(props.series, props.column);\n    }\n\n    return _this;\n  }\n\n  _createClass(BandChart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var aggregation = nextProps.aggregation;\n      var aggregationChanged = false;\n\n      if (_underscore2.default.isUndefined(aggregation) !== _underscore2.default.isUndefined(this.props.aggregation)) {\n        aggregationChanged = true;\n      }\n\n      if (aggregation && this.props.aggregation) {\n        if (aggregation.size !== this.props.aggregation.size) {\n          aggregationChanged = true;\n        }\n      }\n\n      if (aggregationChanged) {\n        this.series = getAggregatedSeries(nextProps.series, nextProps.column, nextProps.aggregation);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var newSeries = nextProps.series;\n      var oldSeries = this.props.series;\n      var width = nextProps.width;\n      var timeScale = nextProps.timeScale;\n      var yScale = nextProps.yScale;\n      var column = nextProps.column;\n      var style = nextProps.style;\n      var aggregation = nextProps.aggregation;\n      var highlighted = nextProps.highlighted;\n      var selected = nextProps.selected;\n      var widthChanged = this.props.width !== width;\n      var timeScaleChanged = (0, _util.scaleAsString)(this.props.timeScale) !== (0, _util.scaleAsString)(timeScale);\n      var yAxisScaleChanged = this.props.yScale !== yScale;\n      var columnChanged = this.props.column !== column;\n      var styleChanged = JSON.stringify(this.props.style) !== JSON.stringify(style);\n      var highlightedChanged = this.props.highlighted !== highlighted;\n      var selectedChanged = this.props.selected !== selected;\n      var aggregationChanged = false;\n\n      if (_underscore2.default.isUndefined(aggregation) !== _underscore2.default.isUndefined(this.props.aggregation)) {\n        aggregationChanged = true;\n      }\n\n      if (aggregation && this.props.aggregation) {\n        if (aggregation.size !== this.props.aggregation.size) {\n          aggregationChanged = true;\n        }\n      }\n\n      var seriesChanged = false;\n\n      if (oldSeries.size() !== newSeries.size()) {\n        seriesChanged = true;\n      } else {\n        seriesChanged = !_pondjs.TimeSeries.is(oldSeries, newSeries);\n      } // If the series changes we need to rebuild this.series with\n      // the incoming props\n\n\n      if (seriesChanged) {\n        if (nextProps.series._collection._type === _pondjs.TimeEvent // eslint-disable-line\n        ) {\n            this.series = getAggregatedSeries(nextProps.series, nextProps.column, nextProps.aggregation);\n          } else {\n          this.series = getSeries(nextProps.series, nextProps.column);\n        }\n      }\n\n      return seriesChanged || timeScaleChanged || widthChanged || columnChanged || styleChanged || yAxisScaleChanged || aggregationChanged || highlightedChanged || selectedChanged;\n    }\n  }, {\n    key: \"handleHover\",\n    value: function handleHover(e, event) {\n      if (this.props.onHighlightChange) {\n        this.props.onHighlightChange(event);\n      }\n    }\n  }, {\n    key: \"handleHoverLeave\",\n    value: function handleHoverLeave() {\n      if (this.props.onHighlightChange) {\n        this.props.onHighlightChange(null);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e, event) {\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange(event);\n      }\n\n      e.stopPropagation();\n    }\n  }, {\n    key: \"providedStyleArray\",\n    value: function providedStyleArray(column) {\n      var style = {};\n\n      if (this.props.style) {\n        if (this.props.style instanceof _styler.Styler) {\n          style = this.props.style.boxChartStyle()[column];\n        } else if (_underscore2.default.isFunction(this.props.style)) {\n          style = this.props.style(column);\n        } else if (_underscore2.default.isObject(this.props.style)) {\n          style = this.props.style ? this.props.style[column] : defaultStyle;\n        }\n      }\n\n      return style;\n    }\n    /**\n     * Returns the style used for drawing the path\n     */\n\n  }, {\n    key: \"style\",\n    value: function style(column, event, level) {\n      var style = void 0;\n\n      if (!this.providedStyle) {\n        this.providedStyle = this.providedStyleArray(this.props.column);\n      }\n\n      if (!_underscore2.default.isNull(this.providedStyle) && (!_underscore2.default.isArray(this.providedStyle) || this.providedStyle.length !== 3)) {\n        console.warn(\"Provided style to BandChart should be an array of 3 objects\");\n        return defaultStyle;\n      }\n\n      var isHighlighted = this.props.highlighted && _pondjs.Event.is(this.props.highlighted, event);\n\n      var isSelected = this.props.selected && _pondjs.Event.is(this.props.selected, event);\n\n      if (this.props.selected) {\n        if (isSelected) {\n          if (!this.selectedStyle || !this.selectedStyle[level]) {\n            if (!this.selectedStyle) {\n              this.selectedStyle = [];\n            }\n\n            this.selectedStyle[level] = (0, _merge2.default)(true, defaultStyle[level].selected, this.providedStyle[level].selected ? this.providedStyle[level].selected : {});\n          }\n\n          style = this.selectedStyle[level];\n        } else if (isHighlighted) {\n          if (!this.highlightedStyle || !this.highlightedStyle[level]) {\n            if (!this.highlightedStyle) {\n              this.highlightedStyle = [];\n            }\n\n            this.highlightedStyle[level] = (0, _merge2.default)(true, defaultStyle[level].highlighted, this.providedStyle[level].highlighted ? this.providedStyle[level].highlighted : {});\n          }\n\n          style = this.highlightedStyle[level];\n        } else {\n          if (!this.mutedStyle) {\n            this.mutedStyle = [];\n          }\n\n          if (!this.mutedStyle[level]) {\n            this.mutedStyle[level] = (0, _merge2.default)(true, defaultStyle[level].muted, this.providedStyle[level].muted ? this.providedStyle[level].muted : {});\n          }\n\n          style = this.mutedStyle[level];\n        }\n      } else if (isHighlighted) {\n        style = (0, _merge2.default)(true, defaultStyle[level].highlighted, this.providedStyle[level].highlighted ? this.providedStyle[level].highlighted : {});\n      } else {\n        if (!this.normalStyle) {\n          this.normalStyle = [];\n        }\n\n        if (!this.normalStyle[level]) {\n          this.normalStyle[level] = (0, _merge2.default)(true, defaultStyle[level].normal, this.providedStyle[level].normal ? this.providedStyle[level].normal : {});\n        }\n\n        style = this.normalStyle[level];\n      }\n\n      return style;\n    }\n  }, {\n    key: \"renderAreas\",\n    value: function renderAreas() {\n      var _this2 = this;\n\n      var column = this.props.column;\n      var areas = [];\n      var styles = [];\n      styles[0] = this.style(column, event, 0); // eslint-disable-line\n\n      styles[1] = this.style(column, event, 1); // eslint-disable-line\n\n      styles[2] = this.style(column, event, 2); // eslint-disable-line\n      // Use D3 to build an area generation function\n\n      var areaGenerator = (0, _d3Shape.area)().curve(_curve2.default[this.props.interpolation]).x(function (d) {\n        return d.x0;\n      }).y0(function (d) {\n        return d.y0;\n      }).y1(function (d) {\n        return d.y1;\n      });\n      var columns = this.series.columns(); // How many areas are we drawing\n\n      var hasInner = true;\n      var hasOuter = true;\n\n      if (_underscore2.default.has(columns, \"innerMin\") || _underscore2.default.has(columns, \"innerMax\")) {\n        hasInner = false;\n      }\n\n      if (_underscore2.default.has(columns, \"outerMin\") || _underscore2.default.has(columns, \"outerMax\")) {\n        hasOuter = false;\n      } // Build the outer area if we have one\n\n\n      if (hasOuter) {\n        var level = 0;\n\n        if (!hasInner) {\n          level += 1;\n        }\n\n        var outerData = [];\n\n        for (var j = 0; j < this.series.size(); j += 1) {\n          var e = this.series.at(j);\n          var timestamp = new Date(e.begin().getTime() + (e.end().getTime() - e.begin().getTime()) / 2);\n          outerData.push({\n            x0: this.props.timeScale(timestamp),\n            y0: this.props.yScale(e.get(\"outerMin\")),\n            y1: this.props.yScale(e.get(\"outerMax\"))\n          });\n        }\n\n        var outerAreaPath = areaGenerator(outerData);\n        areas.push(_react2.default.createElement(\"g\", {\n          key: \"area-outer\"\n        }, _react2.default.createElement(\"path\", {\n          d: outerAreaPath,\n          style: styles[level],\n          onClick: function onClick(e) {\n            return _this2.handleClick(e, column);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this2.handleHoverLeave();\n          },\n          onMouseMove: function onMouseMove(e) {\n            return _this2.handleHover(e, column);\n          }\n        })));\n      }\n\n      if (hasInner) {\n        var _level = 0;\n\n        if (!hasInner) {\n          _level += 1;\n        }\n\n        var innerData = [];\n\n        for (var _j = 0; _j < this.series.size(); _j += 1) {\n          var _e = this.series.at(_j);\n\n          var _timestamp = new Date(_e.begin().getTime() + (_e.end().getTime() - _e.begin().getTime()) / 2);\n\n          innerData.push({\n            x0: this.props.timeScale(_timestamp),\n            y0: this.props.yScale(_e.get(\"innerMin\")),\n            y1: this.props.yScale(_e.get(\"innerMax\"))\n          });\n        }\n\n        var innerAreaPath = areaGenerator(innerData);\n        areas.push(_react2.default.createElement(\"g\", {\n          key: \"area-inner\"\n        }, _react2.default.createElement(\"path\", {\n          d: innerAreaPath,\n          style: styles[_level],\n          onClick: function onClick(e) {\n            return _this2.handleClick(e, column);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this2.handleHoverLeave();\n          },\n          onMouseMove: function onMouseMove(e) {\n            return _this2.handleHover(e, column);\n          }\n        })));\n      }\n\n      return _react2.default.createElement(\"g\", null, areas);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"g\", null, this.renderAreas());\n    }\n  }]);\n\n  return BandChart;\n}(_react2.default.Component);\n\nexports.default = BandChart;\nBandChart.propTypes = {\n  /**\n   * What [Pond TimeSeries](http://software.es.net/pond#timeseries)\n   * data to visualize. See general notes on the BandChart.\n   */\n  series: _propTypes2.default.instanceOf(_pondjs.TimeSeries).isRequired,\n\n  /*\n  series: (props, propName, componentName) => {\n      const value = props[propName];\n      if (!(value instanceof TimeSeries)) {\n      return new Error(\n          `A TimeSeries needs to be passed to ${componentName} as the 'series' prop.`\n      );\n      }\n       // TODO: Better detection of errors\n       // everything ok\n      return null;\n  },\n  */\n\n  /**\n   * The column within the TimeSeries to plot. Unlike other charts, the BandChart\n   * works on just a single column.\n   *\n   * NOTE : Columns can't have periods because periods\n   * represent a path to deep data in the underlying events\n   * (i.e. reference into nested data structures)\n   */\n  column: _propTypes2.default.string,\n\n  /**\n   * The aggregation specification. This object should contain:\n   *   - innerMax\n   *   - innerMin\n   *   - outerMax\n   *   - outerMin\n   *   - center\n   * Though each of the pairs, and center, is optional.\n   * For each of these keys you should supply the function you\n   * want to use to calculate these. You can import common functions\n   * from Pond, e.g. min(), avg(), percentile(95), etc.\n   *\n   * For example:\n   * ```\n   *     {\n   *       size: this.state.rollup,\n   *       reducers: {\n   *         outer: [min(), max()],\n   *         inner: [percentile(25), percentile(75)],\n   *         center: median(),\n   *       },\n   *     }\n   * ```\n   */\n  aggregation: _propTypes2.default.shape({\n    size: _propTypes2.default.string,\n    reducers: _propTypes2.default.shape({\n      inner: _propTypes2.default.arrayOf(_propTypes2.default.func),\n      // eslint-disable-line\n      outer: _propTypes2.default.arrayOf(_propTypes2.default.func),\n      // eslint-disable-line\n      center: _propTypes2.default.func // eslint-disable-line\n\n    })\n  }),\n  // eslint-disable-line\n\n  /**\n   * The style of the box chart drawing (using SVG CSS properties) or\n   * a styler object. It is recommended to user the styler unless you need\n   * detailed customization.\n   */\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.instanceOf(_styler.Styler)]),\n\n  /**\n   * The style of the info box and connecting lines\n   */\n  infoStyle: _propTypes2.default.object,\n  //eslint-disable-line\n\n  /**\n   * The width of the hover info box\n   */\n  infoWidth: _propTypes2.default.number,\n  //eslint-disable-line\n\n  /**\n   * The height of the hover info box\n   */\n  infoHeight: _propTypes2.default.number,\n  //eslint-disable-line\n\n  /**\n   * The values to show in the info box. This is an array of\n   * objects, with each object specifying the label and value\n   * to be shown in the info box.\n   */\n  info: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    //eslint-disable-line\n    label: _propTypes2.default.string,\n    //eslint-disable-line\n    value: _propTypes2.default.string //eslint-disable-line\n\n  })),\n\n  /**\n   * If spacing is specified, then the boxes will be separated from the\n   * timerange boundary by this number of pixels. Use this to space out\n   * the boxes from each other. Inner and outer boxes are controlled\n   * separately.\n   */\n  innerSpacing: _propTypes2.default.number,\n\n  /**\n   * If spacing is specified, then the boxes will be separated from the\n   * timerange boundary by this number of pixels. Use this to space out\n   * the boxes from each other. Inner and outer boxes are controlled\n   * separately.\n   */\n  outerSpacing: _propTypes2.default.number,\n\n  /**\n   * If size is specified, then the innerBox will be this number of pixels wide. This\n   * prop takes priority over \"spacing\".\n   */\n  innerSize: _propTypes2.default.number,\n\n  /**\n   * If size is specified, then the outer box will be this number of pixels wide. This\n   * prop takes priority over \"spacing\".\n   */\n  outerSize: _propTypes2.default.number,\n\n  /**\n   * The selected item, which will be rendered in the \"selected\" style.\n   * If a bar is selected, all other bars will be rendered in the \"muted\" style.\n   *\n   * See also `onSelectionChange`\n   */\n  selected: _propTypes2.default.instanceOf(_pondjs.IndexedEvent),\n\n  /**\n   * The highlighted item, which will be rendered in the \"highlighted\" style.\n   *\n   * See also `onHighlightChange`\n   */\n  highlighted: _propTypes2.default.instanceOf(_pondjs.IndexedEvent),\n\n  /**\n   * A callback that will be called when the selection changes. It will be called\n   * with the event corresponding to the box clicked as its only arg.\n   */\n  onSelectionChange: _propTypes2.default.func,\n\n  /**\n   * A callback that will be called when the hovered over box changes.\n   * It will be called with the event corresponding to the box hovered over.\n   */\n  onHighlightChange: _propTypes2.default.func,\n\n  /**\n   * [Internal] The timeScale supplied by the surrounding ChartContainer\n   */\n  timeScale: _propTypes2.default.func,\n\n  /**\n   * [Internal] The yScale supplied by the associated YAxis\n   */\n  yScale: _propTypes2.default.func,\n\n  /**\n   * [Internal] The width supplied by the surrounding ChartContainer\n   */\n  width: _propTypes2.default.number\n};\nBandChart.defaultProps = {\n  column: \"value\",\n  innerSpacing: 1.0,\n  outerSpacing: 2.0,\n  infoStyle: {\n    stroke: \"#999\",\n    fill: \"white\",\n    opacity: 0.9,\n    pointerEvents: \"none\"\n  },\n  stemStyle: {\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n  },\n  markerStyle: {\n    fill: \"#999\"\n  },\n  markerRadius: 2,\n  infoWidth: 90,\n  infoHeight: 30\n};","map":null,"metadata":{},"sourceType":"script"}