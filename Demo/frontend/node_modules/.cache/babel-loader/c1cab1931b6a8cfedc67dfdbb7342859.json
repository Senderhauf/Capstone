{"ast":null,"code":"import _classCallCheck from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js\";\n\n/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport Ring from \"ringjs\";\nimport { TimeSeries, TimeRange, TimeEvent, Pipeline as pipeline, Stream, EventOut, percentile } from \"pondjs\";\nimport { ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler } from \"react-timeseries-charts\";\nvar sec = 1000;\nvar minute = 60 * sec;\nvar hours = 60 * minute;\nvar rate = 80;\n\nvar realtime =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(realtime, _React$Component);\n\n  function realtime() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, realtime);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(realtime)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      time: new Date(2015, 0, 1),\n      events: new Ring(200),\n      percentile50Out: new Ring(100),\n      percentile90Out: new Ring(100)\n    };\n\n    _this.getNewEvent = function (t) {\n      var base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n      return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n    };\n\n    return _this;\n  }\n\n  _createClass(realtime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //\n      // Setup our aggregation pipelines\n      //\n      this.stream = new Stream();\n      pipeline().from(this.stream).windowBy(\"5m\").emitOn(\"discard\").aggregate({\n        value: {\n          value: percentile(90)\n        }\n      }).to(EventOut, function (event) {\n        var events = _this2.state.percentile90Out;\n        events.push(event);\n\n        _this2.setState({\n          percentile90Out: events\n        });\n      });\n      pipeline().from(this.stream).windowBy(\"5m\").emitOn(\"discard\").aggregate({\n        value: {\n          value: percentile(50)\n        }\n      }).to(EventOut, function (event) {\n        var events = _this2.state.percentile50Out;\n        events.push(event);\n\n        _this2.setState({\n          percentile50Out: events\n        });\n      }); //\n      // Setup our interval to advance the time and generate raw events\n      //\n\n      var increment = minute;\n      this.interval = setInterval(function () {\n        var t = new Date(_this2.state.time.getTime() + increment);\n\n        var event = _this2.getNewEvent(t); // Raw events\n\n\n        var newEvents = _this2.state.events;\n        newEvents.push(event);\n\n        _this2.setState({\n          time: t,\n          events: newEvents\n        }); // Let our aggregators process the event\n\n\n        _this2.stream.addEvent(event);\n      }, rate);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var latestTime = \"\".concat(this.state.time); // const fiveMinuteStyle = {\n      //     value: {\n      //         normal: { fill: \"#619F3A\", opacity: 0.2 },\n      //         highlight: { fill: \"619F3A\", opacity: 0.5 },\n      //         selected: { fill: \"619F3A\", opacity: 0.5 }\n      //     }\n      // };\n\n      var scatterStyle = {\n        value: {\n          normal: {\n            fill: \"steelblue\",\n            opacity: 0.5\n          }\n        }\n      }; //\n      // Create a TimeSeries for our raw, 5min and hourly events\n      //\n\n      var eventSeries = new TimeSeries({\n        name: \"raw\",\n        events: this.state.events.toArray()\n      }); // const perc50Series = new TimeSeries({\n      //     name: \"five minute perc50\",\n      //     events: this.state.percentile50Out.toArray()\n      // });\n      // const perc90Series = new TimeSeries({\n      //     name: \"five minute perc90\",\n      //     events: this.state.percentile90Out.toArray()\n      // });\n      // Timerange for the chart axis\n\n      var initialBeginTime = new Date(2015, 0, 1);\n      console.log(\"initialBeginTime : \".concat(new Date().toString()));\n      var timeWindow = 3 * hours;\n      var beginTime;\n      var endTime = new Date(this.state.time.getTime() + minute);\n\n      if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n        beginTime = initialBeginTime;\n      } else {\n        beginTime = new Date(endTime.getTime() - timeWindow);\n      }\n\n      var timeRange = new TimeRange(beginTime, endTime); // Charts (after a certain amount of time, just show hourly rollup)\n\n      var charts = React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: eventSeries,\n        style: scatterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }));\n      var dateStyle = {\n        fontSize: 12,\n        color: \"#AAA\",\n        borderWidth: 1,\n        borderColor: \"#F4F4F4\"\n      };\n      var style = styler([{\n        key: \"aot1\",\n        color: \"#2980B9\",\n        width: 1,\n        dashed: true\n      }, {\n        key: \"aot2\",\n        color: \"#F1C40F\",\n        width: 2\n      }, {\n        key: \"pilot\",\n        color: \"#27AE60\",\n        width: 2\n      }]);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        type: \"swatch\",\n        style: style,\n        categories: [{\n          key: \"aot1\",\n          label: \"AOT 1\",\n          style: {\n            fill: \"#2980B9\"\n          }\n        }, {\n          key: \"aot2\",\n          label: \"AOT 2\",\n          style: {\n            fill: \"#F1C40F\"\n          }\n        }, {\n          key: \"pilot\",\n          label: \"PILOT\",\n          style: {\n            fill: \"#27AE60\"\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: dateStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, latestTime))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Resizable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(ChartContainer, {\n        timeRange: timeRange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(ChartRow, {\n        height: \"150\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"y\",\n        label: \"Value\",\n        min: 0,\n        max: 1500,\n        width: \"70\",\n        type: \"linear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), charts))))));\n    }\n  }]);\n\n  return realtime;\n}(React.Component); // Export example\n\n\nrealtime.displayName = \"AggregatorDemo\";\nexport default realtime;","map":{"version":3,"sources":["/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js"],"names":["React","Ring","TimeSeries","TimeRange","TimeEvent","Pipeline","pipeline","Stream","EventOut","percentile","ChartContainer","ChartRow","Charts","YAxis","ScatterChart","BarChart","Resizable","Legend","styler","sec","minute","hours","rate","realtime","state","time","Date","events","percentile50Out","percentile90Out","getNewEvent","t","base","Math","sin","getTime","parseInt","random","stream","from","windowBy","emitOn","aggregate","value","to","event","push","setState","increment","interval","setInterval","newEvents","addEvent","clearInterval","latestTime","scatterStyle","normal","fill","opacity","eventSeries","name","toArray","initialBeginTime","console","log","toString","timeWindow","beginTime","endTime","timeRange","charts","dateStyle","fontSize","color","borderWidth","borderColor","style","key","width","dashed","label","Component","displayName"],"mappings":"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","sourcesContent":["/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport Ring from \"ringjs\";\n\nimport {\n    TimeSeries,\n    TimeRange,\n    TimeEvent,\n    Pipeline as pipeline,\n    Stream,\n    EventOut,\n    percentile\n} from \"pondjs\";\n\nimport {ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler} from \"react-timeseries-charts\";\n\nconst sec = 1000;\nconst minute = 60 * sec;\nconst hours = 60 * minute;\nconst rate = 80;\n\nclass realtime extends React.Component {\n    static displayName = \"AggregatorDemo\";\n\n    state = {\n        time: new Date(2015, 0, 1),\n        events: new Ring(200),\n        percentile50Out: new Ring(100),\n        percentile90Out: new Ring(100)\n    };\n\n    getNewEvent = t => {\n        const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n        return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n    };\n\n    componentDidMount() {\n        //\n        // Setup our aggregation pipelines\n        //\n\n        this.stream = new Stream();\n\n        pipeline()\n            .from(this.stream)\n            .windowBy(\"5m\")\n            .emitOn(\"discard\")\n            .aggregate({\n                value: { value: percentile(90) }\n            })\n            .to(EventOut, event => {\n                const events = this.state.percentile90Out;\n                events.push(event);\n                this.setState({ percentile90Out: events });\n            });\n\n        pipeline()\n            .from(this.stream)\n            .windowBy(\"5m\")\n            .emitOn(\"discard\")\n            .aggregate({\n                value: { value: percentile(50) }\n            })\n            .to(EventOut, event => {\n                const events = this.state.percentile50Out;\n                events.push(event);\n                this.setState({ percentile50Out: events });\n            });\n\n        //\n        // Setup our interval to advance the time and generate raw events\n        //\n\n        const increment = minute;\n        this.interval = setInterval(() => {\n            const t = new Date(this.state.time.getTime() + increment);\n            const event = this.getNewEvent(t);\n\n            // Raw events\n            const newEvents = this.state.events;\n            newEvents.push(event);\n            this.setState({ time: t, events: newEvents });\n\n            // Let our aggregators process the event\n            this.stream.addEvent(event);\n        }, rate);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const latestTime = `${this.state.time}`;\n\n        // const fiveMinuteStyle = {\n        //     value: {\n        //         normal: { fill: \"#619F3A\", opacity: 0.2 },\n        //         highlight: { fill: \"619F3A\", opacity: 0.5 },\n        //         selected: { fill: \"619F3A\", opacity: 0.5 }\n        //     }\n        // };\n\n        const scatterStyle = {\n            value: {\n                normal: {\n                    fill: \"steelblue\",\n                    opacity: 0.5\n                }\n            }\n        };\n\n        //\n        // Create a TimeSeries for our raw, 5min and hourly events\n        //\n\n        const eventSeries = new TimeSeries({\n            name: \"raw\",\n            events: this.state.events.toArray()\n        });\n\n        // const perc50Series = new TimeSeries({\n        //     name: \"five minute perc50\",\n        //     events: this.state.percentile50Out.toArray()\n        // });\n\n        // const perc90Series = new TimeSeries({\n        //     name: \"five minute perc90\",\n        //     events: this.state.percentile90Out.toArray()\n        // });\n\n        // Timerange for the chart axis\n        const initialBeginTime = new Date(2015, 0, 1);\n        console.log(`initialBeginTime : ${new Date().toString()}`)\n        const timeWindow = 3 * hours;\n\n        let beginTime;\n        const endTime = new Date(this.state.time.getTime() + minute);\n        if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n            beginTime = initialBeginTime;\n        } else {\n            beginTime = new Date(endTime.getTime() - timeWindow);\n        }\n        const timeRange = new TimeRange(beginTime, endTime);\n\n        // Charts (after a certain amount of time, just show hourly rollup)\n        const charts = (\n            <Charts>\n                {/* <BarChart\n                    axis=\"y\"\n                    series={perc90Series}\n                    style={fiveMinuteStyle}\n                    columns={[\"value\"]}\n                />\n                <BarChart\n                    axis=\"y\"\n                    series={perc50Series}\n                    style={fiveMinuteStyle}\n                    columns={[\"value\"]}\n                /> */}\n                <ScatterChart axis=\"y\" series={eventSeries} style={scatterStyle} />\n            </Charts>\n        );\n\n        const dateStyle = {\n            fontSize: 12,\n            color: \"#AAA\",\n            borderWidth: 1,\n            borderColor: \"#F4F4F4\"\n        };\n\n        const style = styler([\n            { key: \"aot1\", color: \"#2980B9\", width: 1, dashed: true },\n            { key: \"aot2\", color: \"#F1C40F\", width: 2 },\n            { key: \"pilot\", color: \"#27AE60\", width: 2 }\n        ]);\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <Legend\n                            type=\"swatch\"\n                            style={style}\n                            categories={[\n                                {\n                                    key: \"aot1\",\n                                    label: \"AOT 1\",\n                                    style: { fill: \"#2980B9\" }\n                                },\n                                {\n                                    key: \"aot2\",\n                                    label: \"AOT 2\",\n                                    style: { fill: \"#F1C40F\" }\n                                },\n                                {\n                                    key: \"pilot\",\n                                    label: \"PILOT\",\n                                    style: { fill: \"#27AE60\" }\n                                }\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-8\">\n                        <span style={dateStyle}>{latestTime}</span>\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer timeRange={timeRange}>\n                                <ChartRow height=\"150\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"Value\"\n                                        min={0}\n                                        max={1500}\n                                        width=\"70\"\n                                        type=\"linear\"\n                                    />\n                                    {charts}\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Export example\nexport default realtime;"]},"metadata":{},"sourceType":"module"}