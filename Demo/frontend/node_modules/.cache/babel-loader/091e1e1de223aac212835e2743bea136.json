{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _underscore = require(\"underscore\");\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nvar _immutable = require(\"immutable\");\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _event = require(\"./event\");\n\nvar _event2 = _interopRequireDefault(_event);\n\nvar _util = require(\"./base/util\");\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * An `IndexedEvent` uses an `Index` to specify a timerange over which the event\n * occurs and maps that to a data object representing some measurement or metric\n * during that time range.\n *\n * You can supply the index as a string or as an Index object.\n *\n * Example Indexes are:\n *  * 1d-1565 is the entire duration of the 1565th day since the UNIX epoch\n *  * 2014-03 is the entire duration of march in 2014\n *\n * The range, as expressed by the `Index`, is provided by the convenience method\n * `range()`, which returns a `TimeRange` instance. Alternatively the begin\n * and end times represented by the Index can be found with `begin()`\n * and `end()` respectively.\n *\n * The data is also specified during construction, and is generally expected to\n * be an object or an Immutable Map. If an object is provided it will be stored\n * internally as an Immutable Map. If the data provided is some other type then\n * it will be equivalent to supplying an object of `{value: data}`. Data may be\n * undefined.\n *\n * The get the data out of an IndexedEvent instance use `data()`. It will return\n * an Immutable.Map.\n */\n\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\nvar IndexedEvent = function (_Event) {\n  (0, _inherits3.default)(IndexedEvent, _Event);\n  /**\n   * The creation of an IndexedEvent is done by combining two parts:\n   * the Index and the data.\n   *\n   * To construct you specify an Index, along with the data.\n   *\n   * The index may be an Index, or a string.\n   *\n   * To specify the data you can supply either:\n   *     - a Javascript object containing key values pairs\n   *     - an Immutable.Map, or\n   *     - a simple type such as an integer. In the case of the simple type\n   *       this is a shorthand for supplying {\"value\": v}.\n   */\n\n  function IndexedEvent(arg1, arg2, arg3) {\n    (0, _classCallCheck3.default)(this, IndexedEvent);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (IndexedEvent.__proto__ || (0, _getPrototypeOf2.default)(IndexedEvent)).call(this));\n\n    if (arg1 instanceof IndexedEvent) {\n      var other = arg1;\n      _this._d = other._d;\n      return (0, _possibleConstructorReturn3.default)(_this);\n    } else if (arg1 instanceof _immutable2.default.Map) {\n      _this._d = arg1;\n      return (0, _possibleConstructorReturn3.default)(_this);\n    }\n\n    var index = _util2.default.indexFromArgs(arg1, arg3);\n\n    var data = _util2.default.dataFromArg(arg2);\n\n    _this._d = new _immutable2.default.Map({\n      index: index,\n      data: data\n    });\n    return _this;\n  }\n  /**\n   * Returns the timestamp (as ms since the epoch)\n   */\n\n\n  (0, _createClass3.default)(IndexedEvent, [{\n    key: \"key\",\n    value: function key() {\n      return this.indexAsString();\n    }\n    /**\n     * For Avro serialization, this defines the event's key (the Index)\n     * as a simple string\n     */\n\n  }, {\n    key: \"toJSON\",\n\n    /**\n     * Express the IndexedEvent as a JSON object\n     */\n    value: function toJSON() {\n      return {\n        index: this.indexAsString(),\n        data: this.data().toJSON()\n      };\n    }\n    /**\n     * Returns a flat array starting with the index, followed by the values.\n     */\n\n  }, {\n    key: \"toPoint\",\n    value: function toPoint(columns) {\n      var _this2 = this;\n\n      var values = [];\n      columns.forEach(function (c) {\n        var v = _this2.data().get(c);\n\n        values.push(v === \"undefined\" ? null : v);\n      });\n      return [this.indexAsString()].concat(values);\n    }\n    /**\n     * Returns the Index associated with the data in this Event\n     * @return {Index} The Index\n     */\n\n  }, {\n    key: \"index\",\n    value: function index() {\n      return this._d.get(\"index\");\n    }\n    /**\n     * Returns the Index as a string, same as event.index().toString()\n     * @return {string} The Index\n     */\n\n  }, {\n    key: \"indexAsString\",\n    value: function indexAsString() {\n      return this.index().asString();\n    }\n    /**\n     * The TimeRange of this data, in UTC, as a string.\n     * @return {string} TimeRange of this data.\n     */\n\n  }, {\n    key: \"timerangeAsUTCString\",\n    value: function timerangeAsUTCString() {\n      return this.timerange().toUTCString();\n    }\n    /**\n     * The TimeRange of this data, in Local time, as a string.\n     * @return {string} TimeRange of this data.\n     */\n\n  }, {\n    key: \"timerangeAsLocalString\",\n    value: function timerangeAsLocalString() {\n      return this.timerange().toLocalString();\n    }\n    /**\n     * The TimeRange of this data\n     * @return {TimeRange} TimeRange of this data.\n     */\n\n  }, {\n    key: \"timerange\",\n    value: function timerange() {\n      return this.index().asTimerange();\n    }\n    /**\n     * The begin time of this Event\n     * @return {Data} Begin time\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      return this.timerange().begin();\n    }\n    /**\n     * The end time of this Event\n     * @return {Data} End time\n     */\n\n  }, {\n    key: \"end\",\n    value: function end() {\n      return this.timerange().end();\n    }\n    /**\n     * Alias for the begin() time.\n     * @return {Data} Time representing this Event\n     */\n\n  }, {\n    key: \"timestamp\",\n    value: function timestamp() {\n      return this.begin();\n    }\n  }], [{\n    key: \"keySchema\",\n    value: function keySchema() {\n      return {\n        name: \"index\",\n        type: \"string\"\n      };\n    }\n  }]);\n  return IndexedEvent;\n}(_event2.default);\n\nexports.default = IndexedEvent;","map":null,"metadata":{},"sourceType":"script"}