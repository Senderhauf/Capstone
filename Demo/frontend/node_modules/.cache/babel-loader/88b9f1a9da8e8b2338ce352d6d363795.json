{"ast":null,"code":"import _classCallCheck from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/DAG.js\";\nimport React, { Component } from \"react\";\nimport { Graph } from 'react-d3-graph';\n\nvar DAG =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DAG, _Component);\n\n  function DAG(props) {\n    var _this;\n\n    _classCallCheck(this, DAG);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DAG).call(this, props));\n\n    _this.onClickGraph = function () {\n      window.alert(\"Clicked the graph background\");\n    };\n\n    _this.onClickNode = function (nodeId) {};\n\n    _this.onRightClickNode = function (event, nodeId) {\n      window.alert(\"Right clicked node \".concat(nodeId));\n    };\n\n    _this.onMouseOverNode = function (nodeId) {\n      window.alert(\"Mouse over node \".concat(nodeId));\n    };\n\n    _this.onMouseOutNode = function (nodeId) {\n      window.alert(\"Mouse out node \".concat(nodeId));\n    };\n\n    _this.onClickLink = function (source, target) {\n      window.alert(\"Clicked link between \".concat(source, \" and \").concat(target));\n    };\n\n    _this.onRightClickLink = function (event, source, target) {\n      window.alert(\"Right clicked link between \".concat(source, \" and \").concat(target));\n    };\n\n    _this.onMouseOverLink = function (source, target) {\n      window.alert(\"Mouse over in link between \".concat(source, \" and \").concat(target));\n    };\n\n    _this.onMouseOutLink = function (source, target) {\n      window.alert(\"Mouse out link between \".concat(source, \" and \").concat(target));\n    };\n\n    _this.state = {\n      myConfig: {\n        nodeHighlightBehavior: true,\n        node: {\n          color: 'lightgreen',\n          size: 300,\n          highlightStrokeColor: 'blue',\n          fontSize: 18\n        },\n        link: {\n          highlightColor: 'lightblue'\n        },\n        directed: true,\n        staticGraph: true,\n        height: 200,\n        width: 500,\n        maxZoom: 2\n      }\n    };\n    return _this;\n  } // graph event callbacks\n\n\n  _createClass(DAG, [{\n    key: \"getAot1NodeColor\",\n    value: function getAot1NodeColor() {\n      return this.props.aot1 === \"valid\" ? \"lightgreen\" : \"red\";\n    }\n  }, {\n    key: \"getAot2NodeColor\",\n    value: function getAot2NodeColor() {\n      return this.props.aot2 === \"valid\" ? \"lightgreen\" : \"red\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.state.data = {\n        nodes: [{\n          id: \"AOT 1\",\n          x: 100,\n          y: 30,\n          color: getAot1NodeColor()\n        }, {\n          id: \"AOT 2\",\n          x: 100,\n          y: 140,\n          color: getAot2NodeColor()\n        }, {\n          id: \"DIFF\",\n          x: 180,\n          y: 90\n        }, {\n          id: \"PILOT\",\n          x: 230,\n          y: 180\n        }, {\n          id: \"NOSE ANGLE\",\n          x: 300,\n          y: 130\n        }],\n        links: [{\n          source: 'AOT 1',\n          target: 'DIFF'\n        }, {\n          source: 'AOT 2',\n          target: 'DIFF'\n        }, {\n          source: 'DIFF',\n          target: \"NOSE ANGLE\"\n        }, {\n          source: \"PILOT\",\n          target: \"NOSE ANGLE\"\n        }]\n      };\n      console.log('DAG STATE ON RERENDER: \\n'); // console.log(JSON.stringify(this.state.data, null, '\\t'))\n\n      return React.createElement(Graph, {\n        id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n        ,\n        data: this.state.data,\n        config: this.state.myConfig,\n        onClickNode: this.onClickNode,\n        onRightClickNode: this.onRightClickNode,\n        onClickGraph: this.onClickGraph,\n        onClickLink: this.onClickLink,\n        onRightClickLink: this.onRightClickLink //onMouseOverNode={this.onMouseOverNode}\n        //onMouseOutNode={this.onMouseOutNode}\n        //onMouseOverLink={this.onMouseOverLink}\n        //onMouseOutLink={this.onMouseOutLink}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return DAG;\n}(Component);\n\nexport default DAG;\n/**\n\n<path class=\"link\" d=\"M230,180A0,0 0 0,1 300,130\" marker-end=\"url(#marker-large)\" id=\"PILOT,NOSE ANGLE: 3\" style=\"stroke-width: 1.5; stroke: rgb(211, 211, 211); opacity: 1; fill: none; cursor: pointer;\"></path>\n\n<path class=\"link\" d=\"M230,180A0,0 0 0,1 0,0\" marker-end=\"url(#marker-large)\" id=\"PILOT,NOSE ANGLE: 3\" style=\"stroke-width: 1.5; stroke: rgb(211, 211, 211); opacity: 1; fill: none; cursor: pointer;\"></path>\n\n */","map":{"version":3,"sources":["/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/DAG.js"],"names":["React","Component","Graph","DAG","props","onClickGraph","window","alert","onClickNode","nodeId","onRightClickNode","event","onMouseOverNode","onMouseOutNode","onClickLink","source","target","onRightClickLink","onMouseOverLink","onMouseOutLink","state","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","fontSize","link","highlightColor","directed","staticGraph","height","width","maxZoom","aot1","aot2","data","nodes","id","x","y","getAot1NodeColor","getAot2NodeColor","links","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Graph } from 'react-d3-graph';\n\n\nclass DAG extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            myConfig: {\n                nodeHighlightBehavior: true,\n                node: {\n                    color: 'lightgreen',\n                    size: 300,\n                    highlightStrokeColor: 'blue', \n                    fontSize: 18\n                },\n                link: {\n                    highlightColor: 'lightblue'\n                }, \n                directed: true, \n                staticGraph: true, \n                height: 200, \n                width: 500, \n                maxZoom: 2\n\n            }\n        }\n    }\n    \n    // graph event callbacks\n    onClickGraph = function() {\n        window.alert(`Clicked the graph background`);\n    };\n    \n    onClickNode = function(nodeId) {\n    };\n    \n    onRightClickNode = function(event, nodeId) {\n        window.alert(`Right clicked node ${nodeId}`);\n    };\n    \n    onMouseOverNode = function(nodeId) {\n        window.alert(`Mouse over node ${nodeId}`);\n    };\n    \n    onMouseOutNode = function(nodeId) {\n        window.alert(`Mouse out node ${nodeId}`);\n    };\n    \n    onClickLink = function(source, target) {\n        window.alert(`Clicked link between ${source} and ${target}`);\n    };\n    \n    onRightClickLink = function(event, source, target) {\n        window.alert(`Right clicked link between ${source} and ${target}`);\n    };\n    \n    onMouseOverLink = function(source, target) {\n        window.alert(`Mouse over in link between ${source} and ${target}`);\n    };\n    \n    onMouseOutLink = function(source, target) {\n        window.alert(`Mouse out link between ${source} and ${target}`);\n    };\n\n    getAot1NodeColor(){\n        return (this.props.aot1 === \"valid\") ? \"lightgreen\" : \"red\"\n    }\n\n    getAot2NodeColor(){\n        return (this.props.aot2 === \"valid\") ? \"lightgreen\" : \"red\"\n    }\n\n    render() {\n\n        this.state.data = {\n            nodes: [\n                { id: `AOT 1`, x: 100, y: 30, color: getAot1NodeColor()}, \n                { id: `AOT 2`, x: 100, y: 140, color: getAot2NodeColor() }, \n                { id: `DIFF`, x: 180, y: 90 }, \n                { id: `PILOT`, x: 230, y: 180 }, \n                { id: `NOSE ANGLE`, x: 300, y: 130}],\n            \n            links: [\n                { source: 'AOT 1', target: 'DIFF'}, \n                { source: 'AOT 2', target: 'DIFF' }, \n                { source: 'DIFF', target: `NOSE ANGLE`}, \n                {source: `PILOT`, target: `NOSE ANGLE`}],\n        }\n\n\n        console.log('DAG STATE ON RERENDER: \\n')\n\n        // console.log(JSON.stringify(this.state.data, null, '\\t'))\n        return (\n            <Graph\n                id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n                data={this.state.data}\n                config={this.state.myConfig}\n                onClickNode={this.onClickNode}\n                onRightClickNode={this.onRightClickNode}\n                onClickGraph={this.onClickGraph}\n                onClickLink={this.onClickLink}\n                onRightClickLink={this.onRightClickLink}\n                //onMouseOverNode={this.onMouseOverNode}\n                //onMouseOutNode={this.onMouseOutNode}\n                //onMouseOverLink={this.onMouseOverLink}\n                //onMouseOutLink={this.onMouseOutLink}\n            />\n        )\n    }\n}\n\nexport default DAG\n\n/**\n\n<path class=\"link\" d=\"M230,180A0,0 0 0,1 300,130\" marker-end=\"url(#marker-large)\" id=\"PILOT,NOSE ANGLE: 3\" style=\"stroke-width: 1.5; stroke: rgb(211, 211, 211); opacity: 1; fill: none; cursor: pointer;\"></path>\n\n<path class=\"link\" d=\"M230,180A0,0 0 0,1 0,0\" marker-end=\"url(#marker-large)\" id=\"PILOT,NOSE ANGLE: 3\" style=\"stroke-width: 1.5; stroke: rgb(211, 211, 211); opacity: 1; fill: none; cursor: pointer;\"></path>\n\n */"]},"metadata":{},"sourceType":"module"}