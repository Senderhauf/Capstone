{"ast":null,"code":"var Ring = function Ring(size) {\n  if (!(this instanceof Ring)) {\n    return new Ring(size);\n  }\n\n  var _list = new Array(size);\n\n  var _start = 0;\n  var _count = 0;\n  var self = this;\n\n  this.__defineGetter__('isFull', function () {\n    return _count === size;\n  });\n\n  this.__defineGetter__('isEmpty', function () {\n    return _count === 0;\n  });\n\n  this.__defineGetter__('count', function () {\n    return _count;\n  });\n\n  this.__defineGetter__('size', function () {\n    return size;\n  });\n\n  function push(item) {\n    var end = (_start + _count) % size;\n    _list[end] = item;\n\n    if (_count === size) {\n      _start = (_start + 1) % size;\n      /* full, overwrite */\n    } else {\n      ++_count;\n    }\n  }\n\n  this.push = function () {\n    for (var i = 0; i < arguments.length; i++) {\n      push(arguments[i]);\n    }\n  };\n\n  this.dequeue = function () {\n    if (this.isEmpty) return undefined;\n    var item = _list[_start];\n    _list[_start] = undefined;\n    _start = (_start + 1) % size;\n    --_count;\n    return item;\n  };\n\n  this.forEach = function (cb) {\n    if (!cb) return;\n\n    for (var i = _start, count = _count; count > 0; i = (i + 1) % size, --count) {\n      cb(_list[i]);\n    }\n  };\n\n  this.toArray = function () {\n    var arr = new Array(_count);\n    var i = 0;\n    this.forEach(function (item) {\n      arr[i++] = item;\n    });\n    return arr;\n  };\n};\n\nmodule.exports = Ring;","map":null,"metadata":{},"sourceType":"script"}