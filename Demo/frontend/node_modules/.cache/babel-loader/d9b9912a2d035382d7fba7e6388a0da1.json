{"ast":null,"code":"import _classCallCheck from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js\";\n\n/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport Ring from \"ringjs\";\nimport { TimeSeries, TimeRange, TimeEvent, Pipeline as pipeline, Stream, EventOut, percentile } from \"pondjs\";\nimport { ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler } from \"react-timeseries-charts\";\nimport socketIOClient from \"socket.io-client\";\nvar sec = 1000;\nvar minute = 60 * sec;\nvar hours = 60 * minute;\nvar rate = 1000;\n\nvar realtime =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(realtime, _React$Component);\n\n  function realtime(props) {\n    var _this;\n\n    _classCallCheck(this, realtime);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(realtime).call(this, props));\n\n    _this.getNewEvent = function (t) {\n      // const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n      var base = Math.sin(t.getTime() / 10000000) * 16 + 20; // return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n\n      return new TimeEvent(t, parseInt(base + Math.random() * 5, 10));\n    };\n\n    _this.state = {\n      beginTime: new Date(),\n      time: new Date(),\n      events: new Ring(100),\n      nose_angle_events: new Ring(200),\n      aot1_events: new Ring(200),\n      aot2_events: new Ring(200),\n      socket: socketIOClient(\"http://localhost:3001/\")\n    };\n    return _this;\n  }\n\n  _createClass(realtime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //\n      // Setup our aggregation pipelines\n      //\n      //\n      // Setup our interval to advance the time and generate raw events\n      //\n      this.intervalNoseAngle = setInterval(function () {\n        // const t = new Date(this.state.time.getTime()+sec)\n        var t = new Date();\n        var event = new TimeEvent(t, _this2.props.noseAngle);\n        var newNoseAngleEvents = _this2.state.nose_angle_events;\n        newNoseAngleEvents.push(event);\n\n        _this2.setState({\n          time: t,\n          nose_angle_events: newNoseAngleEvents\n        }); // console.log(\"nose_angle event handled in RealTimeChart\")\n\n      }, 100);\n      this.intervalAot1 = setInterval(function () {\n        var t = new Date();\n        var event = new TimeEvent(t, _this2.props.aot1);\n        var newAot1Events = _this2.state.aot1_events;\n        newAot1Events.push(event);\n\n        _this2.setState({\n          time: t,\n          aot1_events: newAot1Events\n        });\n      }, 100);\n      this.intervalAot2 = setInterval(function () {\n        var t = new Date();\n        var event = new TimeEvent(t, _this2.props.aot2);\n        var newAot2Events = _this2.state.aot2_events;\n        newAot2Events.push(event);\n\n        _this2.setState({\n          time: t,\n          aot2_events: newAot2Events\n        });\n      }, 100);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalNoseAngle);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var latestTime = \"\".concat(this.state.time);\n      var scatterStyle = {\n        value: {\n          normal: {\n            fill: \"steelblue\",\n            opacity: 0.9\n          }\n        }\n      }; //\n      // Create a TimeSeries for our raw and nose_angle events\n      //\n\n      var noseAngleEventSeries = new TimeSeries({\n        name: \"nose_angle\",\n        events: this.state.nose_angle_events.toArray()\n      }); // Timerange for the chart axis\n\n      var initialBeginTime = new Date();\n      var timeWindow = 1 * minute;\n      var beginTime = this.state.beginTime; // const endTime = new Date(this.state.time.getTime() + minute);\n      // const endTime = new Date(initialBeginTime.getTime() + hours);\n      // if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n      // beginTime = initialBeginTime;\n      // } else {\n      //     beginTime = new Date(endTime.getTime() - timeWindow);\n      // }\n\n      var endTime = new Date();\n\n      if (endTime.getTime() - beginTime.getTime() > 5000) {\n        beginTime = new Date(endTime.getTime() - 5000);\n        console.log(\"CONDITIONAL: \".concat(endTime.getTime() - beginTime.getTime()));\n      } // beginTime = new Date(beginTime.getTime() - timeWindow)\n\n\n      var timeRange = new TimeRange(beginTime, endTime);\n      console.log(\"\\ncurrent time : \".concat(new Date().getTime()));\n      console.log(\"beginTime : \".concat(beginTime.getTime()));\n      console.log(\"endTime : \".concat(endTime.getTime()));\n      console.log(\"timeRange : \".concat(timeRange.toString())); // Charts (after a certain amount of time, just show hourly rollup)\n\n      var charts = React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: noseAngleEventSeries,\n        style: scatterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }));\n      var dateStyle = {\n        fontSize: 12,\n        color: \"#AAA\",\n        borderWidth: 1,\n        borderColor: \"#F4F4F4\"\n      };\n      var style = styler([{\n        key: \"aot1\",\n        color: \"#2980B9\",\n        width: 1,\n        dashed: true\n      }, {\n        key: \"aot2\",\n        color: \"#F1C40F\",\n        width: 2\n      }, {\n        key: \"pilot\",\n        color: \"#27AE60\",\n        width: 2\n      }]);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        type: \"swatch\",\n        style: style,\n        categories: [{\n          key: \"aot1\",\n          label: \"AOT 1\",\n          style: {\n            fill: \"#2980B9\"\n          }\n        }, {\n          key: \"aot2\",\n          label: \"AOT 2\",\n          style: {\n            fill: \"#F1C40F\"\n          }\n        }, {\n          key: \"pilot\",\n          label: \"PILOT\",\n          style: {\n            fill: \"#27AE60\"\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: dateStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, latestTime))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Resizable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(ChartContainer, {\n        timeRange: timeRange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(ChartRow, {\n        height: \"200\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"y\",\n        label: \"Value\",\n        min: -2,\n        max: 20,\n        width: \"50\",\n        type: \"linear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), charts))))));\n    }\n  }]);\n\n  return realtime;\n}(React.Component); // Export example\n\n\nexport default realtime;","map":{"version":3,"sources":["/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js"],"names":["React","Ring","TimeSeries","TimeRange","TimeEvent","Pipeline","pipeline","Stream","EventOut","percentile","ChartContainer","ChartRow","Charts","YAxis","ScatterChart","BarChart","Resizable","Legend","styler","socketIOClient","sec","minute","hours","rate","realtime","props","getNewEvent","t","base","Math","sin","getTime","parseInt","random","state","beginTime","Date","time","events","nose_angle_events","aot1_events","aot2_events","socket","intervalNoseAngle","setInterval","event","noseAngle","newNoseAngleEvents","push","setState","intervalAot1","aot1","newAot1Events","intervalAot2","aot2","newAot2Events","clearInterval","latestTime","scatterStyle","value","normal","fill","opacity","noseAngleEventSeries","name","toArray","initialBeginTime","timeWindow","endTime","console","log","timeRange","toString","charts","dateStyle","fontSize","color","borderWidth","borderColor","style","key","width","dashed","label","Component"],"mappings":";;;;;;;AAAA;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SACIC,UADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,QAAQ,IAAIC,QAJhB,EAKIC,MALJ,EAMIC,QANJ,EAOIC,UAPJ,QAQO,QARP;AAUA,SAAQC,cAAR,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,YAAjD,EAA+DC,QAA/D,EAAyEC,SAAzE,EAAoFC,MAApF,EAA4FC,MAA5F,QAAyG,yBAAzG;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AAGA,IAAMC,GAAG,GAAG,IAAZ;AACA,IAAMC,MAAM,GAAG,KAAKD,GAApB;AACA,IAAME,KAAK,GAAG,KAAKD,MAAnB;AACA,IAAME,IAAI,GAAG,IAAb;;IAEMC,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;;AADe,UAenBC,WAfmB,GAeL,UAAAC,CAAC,EAAI;AACf;AAEA,UAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAC,CAACI,OAAF,KAAc,QAAvB,IAAmC,EAAnC,GAAwC,EAArD,CAHe,CAKf;;AAEA,aAAO,IAAI3B,SAAJ,CAAcuB,CAAd,EAAiBK,QAAQ,CAACJ,IAAI,GAAGC,IAAI,CAACI,MAAL,KAAgB,CAAxB,EAA2B,EAA3B,CAAzB,CAAP;AACH,KAvBkB;;AAGf,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EADF;AAETC,MAAAA,IAAI,EAAE,IAAID,IAAJ,EAFG;AAGTE,MAAAA,MAAM,EAAE,IAAIrC,IAAJ,CAAS,GAAT,CAHC;AAITsC,MAAAA,iBAAiB,EAAE,IAAItC,IAAJ,CAAS,GAAT,CAJV;AAKTuC,MAAAA,WAAW,EAAE,IAAIvC,IAAJ,CAAS,GAAT,CALJ;AAMTwC,MAAAA,WAAW,EAAE,IAAIxC,IAAJ,CAAS,GAAT,CANJ;AAOTyC,MAAAA,MAAM,EAAEvB,cAAc,CAAC,wBAAD;AAPb,KAAb;AAHe;AAYlB;;;;wCAamB;AAAA;;AAChB;AACA;AACA;AAEA;AACA;AACA;AAEA,WAAKwB,iBAAL,GAAyBC,WAAW,CAAC,YAAM;AACvC;AACA,YAAMjB,CAAC,GAAG,IAAIS,IAAJ,EAAV;AACA,YAAMS,KAAK,GAAG,IAAIzC,SAAJ,CAAcuB,CAAd,EAAiB,MAAI,CAACF,KAAL,CAAWqB,SAA5B,CAAd;AACA,YAAMC,kBAAkB,GAAG,MAAI,CAACb,KAAL,CAAWK,iBAAtC;AACAQ,QAAAA,kBAAkB,CAACC,IAAnB,CAAwBH,KAAxB;;AACA,QAAA,MAAI,CAACI,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAEV,CAAR;AAAWY,UAAAA,iBAAiB,EAAEQ;AAA9B,SAAd,EANuC,CAOvC;;AACH,OARmC,EAQjC,GARiC,CAApC;AAUA,WAAKG,YAAL,GAAoBN,WAAW,CAAC,YAAM;AAClC,YAAMjB,CAAC,GAAG,IAAIS,IAAJ,EAAV;AACA,YAAMS,KAAK,GAAG,IAAIzC,SAAJ,CAAcuB,CAAd,EAAiB,MAAI,CAACF,KAAL,CAAW0B,IAA5B,CAAd;AACA,YAAMC,aAAa,GAAG,MAAI,CAAClB,KAAL,CAAWM,WAAjC;AACAY,QAAAA,aAAa,CAACJ,IAAd,CAAmBH,KAAnB;;AACA,QAAA,MAAI,CAACI,QAAL,CAAc;AAACZ,UAAAA,IAAI,EAAEV,CAAP;AAAUa,UAAAA,WAAW,EAAEY;AAAvB,SAAd;AACH,OAN8B,EAM5B,GAN4B,CAA/B;AASA,WAAKC,YAAL,GAAoBT,WAAW,CAAC,YAAM;AAClC,YAAMjB,CAAC,GAAG,IAAIS,IAAJ,EAAV;AACA,YAAMS,KAAK,GAAG,IAAIzC,SAAJ,CAAcuB,CAAd,EAAiB,MAAI,CAACF,KAAL,CAAW6B,IAA5B,CAAd;AACA,YAAMC,aAAa,GAAG,MAAI,CAACrB,KAAL,CAAWO,WAAjC;AACAc,QAAAA,aAAa,CAACP,IAAd,CAAmBH,KAAnB;;AACA,QAAA,MAAI,CAACI,QAAL,CAAc;AAACZ,UAAAA,IAAI,EAAEV,CAAP;AAAUc,UAAAA,WAAW,EAAEc;AAAvB,SAAd;AACH,OAN8B,EAM5B,GAN4B,CAA/B;AAQH;;;2CAEsB;AACnBC,MAAAA,aAAa,CAAC,KAAKb,iBAAN,CAAb;AACH;;;6BAEQ;AACL,UAAMc,UAAU,aAAM,KAAKvB,KAAL,CAAWG,IAAjB,CAAhB;AAEA,UAAMqB,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAE;AACHC,UAAAA,MAAM,EAAE;AACJC,YAAAA,IAAI,EAAE,WADF;AAEJC,YAAAA,OAAO,EAAE;AAFL;AADL;AADU,OAArB,CAHK,CAYL;AACA;AACA;;AAEA,UAAMC,oBAAoB,GAAG,IAAI7D,UAAJ,CAAe;AACxC8D,QAAAA,IAAI,EAAE,YADkC;AAExC1B,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK,iBAAX,CAA6B0B,OAA7B;AAFgC,OAAf,CAA7B,CAhBK,CAqBL;;AACA,UAAMC,gBAAgB,GAAG,IAAI9B,IAAJ,EAAzB;AACA,UAAM+B,UAAU,GAAG,IAAI9C,MAAvB;AAEA,UAAIc,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAA3B,CAzBK,CA0BL;AAEA;AAGA;AACI;AACJ;AACA;AACA;;AAEA,UAAIiC,OAAO,GAAG,IAAIhC,IAAJ,EAAd;;AAEA,UAAIgC,OAAO,CAACrC,OAAR,KAAoBI,SAAS,CAACJ,OAAV,EAApB,GAA0C,IAA9C,EAAmD;AAC/CI,QAAAA,SAAS,GAAG,IAAIC,IAAJ,CAASgC,OAAO,CAACrC,OAAR,KAAoB,IAA7B,CAAZ;AACAsC,QAAAA,OAAO,CAACC,GAAR,wBAA4BF,OAAO,CAACrC,OAAR,KAAoBI,SAAS,CAACJ,OAAV,EAAhD;AACH,OA1CI,CA4CL;;;AACA,UAAMwC,SAAS,GAAG,IAAIpE,SAAJ,CAAcgC,SAAd,EAAyBiC,OAAzB,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,4BAAiC,IAAIlC,IAAJ,EAAD,CAAaL,OAAb,EAAhC;AACAsC,MAAAA,OAAO,CAACC,GAAR,uBAA2BnC,SAAS,CAACJ,OAAV,EAA3B;AACAsC,MAAAA,OAAO,CAACC,GAAR,qBAAyBF,OAAO,CAACrC,OAAR,EAAzB;AACAsC,MAAAA,OAAO,CAACC,GAAR,uBAA2BC,SAAS,CAACC,QAAV,EAA3B,GAjDK,CAmDL;;AACA,UAAMC,MAAM,GACR,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAC,GAAnB;AAAuB,QAAA,MAAM,EAAEV,oBAA/B;AAAqD,QAAA,KAAK,EAAEL,YAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAQA,UAAMgB,SAAS,GAAG;AACdC,QAAAA,QAAQ,EAAE,EADI;AAEdC,QAAAA,KAAK,EAAE,MAFO;AAGdC,QAAAA,WAAW,EAAE,CAHC;AAIdC,QAAAA,WAAW,EAAE;AAJC,OAAlB;AAOA,UAAMC,KAAK,GAAG7D,MAAM,CAAC,CACjB;AAAE8D,QAAAA,GAAG,EAAE,MAAP;AAAeJ,QAAAA,KAAK,EAAE,SAAtB;AAAiCK,QAAAA,KAAK,EAAE,CAAxC;AAA2CC,QAAAA,MAAM,EAAE;AAAnD,OADiB,EAEjB;AAAEF,QAAAA,GAAG,EAAE,MAAP;AAAeJ,QAAAA,KAAK,EAAE,SAAtB;AAAiCK,QAAAA,KAAK,EAAE;AAAxC,OAFiB,EAGjB;AAAED,QAAAA,GAAG,EAAE,OAAP;AAAgBJ,QAAAA,KAAK,EAAE,SAAvB;AAAkCK,QAAAA,KAAK,EAAE;AAAzC,OAHiB,CAAD,CAApB;AAMA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,KAAK,EAAEF,KAFX;AAGI,QAAA,UAAU,EAAE,CACR;AACIC,UAAAA,GAAG,EAAE,MADT;AAEIG,UAAAA,KAAK,EAAE,OAFX;AAGIJ,UAAAA,KAAK,EAAE;AAAElB,YAAAA,IAAI,EAAE;AAAR;AAHX,SADQ,EAMR;AACImB,UAAAA,GAAG,EAAE,MADT;AAEIG,UAAAA,KAAK,EAAE,OAFX;AAGIJ,UAAAA,KAAK,EAAE;AAAElB,YAAAA,IAAI,EAAE;AAAR;AAHX,SANQ,EAWR;AACImB,UAAAA,GAAG,EAAE,OADT;AAEIG,UAAAA,KAAK,EAAE,OAFX;AAGIJ,UAAAA,KAAK,EAAE;AAAElB,YAAAA,IAAI,EAAE;AAAR;AAHX,SAXQ,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAwBI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,KAAK,EAAEa,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBjB,UAAzB,CADJ,CAxBJ,CADJ,EA6BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7BJ,EA8BI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,SAAS,EAAEc,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,EAAE,EAAC,GADP;AAEI,QAAA,KAAK,EAAC,OAFV;AAGI,QAAA,GAAG,EAAE,CAAC,CAHV;AAII,QAAA,GAAG,EAAE,EAJT;AAKI,QAAA,KAAK,EAAC,IALV;AAMI,QAAA,IAAI,EAAC,QANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EASKE,MATL,CADJ,CADJ,CADJ,CADJ,CA9BJ,CADJ;AAoDH;;;;EAjMkBzE,KAAK,CAACoF,S,GAoM7B;;;AACA,eAAe5D,QAAf","sourcesContent":["/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport Ring from \"ringjs\";\n\nimport {\n    TimeSeries,\n    TimeRange,\n    TimeEvent,\n    Pipeline as pipeline,\n    Stream,\n    EventOut,\n    percentile\n} from \"pondjs\";\n\nimport {ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler} from \"react-timeseries-charts\";\n\nimport socketIOClient from \"socket.io-client\";\n\n\nconst sec = 1000;\nconst minute = 60 * sec;\nconst hours = 60 * minute;\nconst rate = 1000;\n\nclass realtime extends React.Component {\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            beginTime: new Date(),\n            time: new Date(),\n            events: new Ring(100),\n            nose_angle_events: new Ring(200), \n            aot1_events: new Ring(200), \n            aot2_events: new Ring(200),\n            socket: socketIOClient(\"http://localhost:3001/\") \n        };\n    }\n\n\n    getNewEvent = t => {\n        // const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n\n        const base = Math.sin(t.getTime() / 10000000) * 16 + 20\n\n        // return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n\n        return new TimeEvent(t, parseInt(base + Math.random() * 5, 10));\n    };\n\n    componentDidMount() {\n        //\n        // Setup our aggregation pipelines\n        //\n\n        //\n        // Setup our interval to advance the time and generate raw events\n        //\n\n        this.intervalNoseAngle = setInterval(() => {\n            // const t = new Date(this.state.time.getTime()+sec)\n            const t = new Date()\n            const event = new TimeEvent(t, this.props.noseAngle)\n            const newNoseAngleEvents = this.state.nose_angle_events\n            newNoseAngleEvents.push(event)\n            this.setState({ time: t, nose_angle_events: newNoseAngleEvents });\n            // console.log(\"nose_angle event handled in RealTimeChart\")\n        }, 100)\n\n        this.intervalAot1 = setInterval(() => {\n            const t = new Date()\n            const event = new TimeEvent(t, this.props.aot1)\n            const newAot1Events = this.state.aot1_events\n            newAot1Events.push(event)\n            this.setState({time: t, aot1_events: newAot1Events})\n        }, 100)\n        \n\n        this.intervalAot2 = setInterval(() => {\n            const t = new Date()\n            const event = new TimeEvent(t, this.props.aot2)\n            const newAot2Events = this.state.aot2_events\n            newAot2Events.push(event)\n            this.setState({time: t, aot2_events: newAot2Events})\n        }, 100)\n        \n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalNoseAngle);\n    }\n\n    render() {\n        const latestTime = `${this.state.time}`;\n\n        const scatterStyle = {\n            value: {\n                normal: {\n                    fill: \"steelblue\",\n                    opacity: 0.9\n                }\n            }\n        };\n\n        //\n        // Create a TimeSeries for our raw and nose_angle events\n        //\n\n        const noseAngleEventSeries = new TimeSeries({\n            name: \"nose_angle\", \n            events: this.state.nose_angle_events.toArray()\n        })\n\n        // Timerange for the chart axis\n        const initialBeginTime = new Date();\n        const timeWindow = 1 * minute;\n\n        let beginTime = this.state.beginTime;\n        // const endTime = new Date(this.state.time.getTime() + minute);\n        \n        // const endTime = new Date(initialBeginTime.getTime() + hours);\n\n\n        // if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n            // beginTime = initialBeginTime;\n        // } else {\n        //     beginTime = new Date(endTime.getTime() - timeWindow);\n        // }\n\n        let endTime = new Date()\n\n        if (endTime.getTime() - beginTime.getTime() > 5000){\n            beginTime = new Date(endTime.getTime() - 5000)\n            console.log(`CONDITIONAL: ${endTime.getTime() - beginTime.getTime()}`)\n        }\n\n        // beginTime = new Date(beginTime.getTime() - timeWindow)\n        const timeRange = new TimeRange(beginTime, endTime);\n        console.log(`\\ncurrent time : ${(new Date()).getTime()}`)\n        console.log(`beginTime : ${beginTime.getTime()}`)\n        console.log(`endTime : ${endTime.getTime()}`)\n        console.log(`timeRange : ${timeRange.toString()}`)\n\n        // Charts (after a certain amount of time, just show hourly rollup)\n        const charts = (\n            <Charts>\n                {/* <ScatterChart axis=\"y\" series={eventSeries} style={scatterStyle} /> */}\n                <ScatterChart axis=\"y\" series={noseAngleEventSeries} style={scatterStyle} />   \n\n            </Charts>\n        );\n\n        const dateStyle = {\n            fontSize: 12,\n            color: \"#AAA\",\n            borderWidth: 1,\n            borderColor: \"#F4F4F4\"\n        };\n\n        const style = styler([\n            { key: \"aot1\", color: \"#2980B9\", width: 1, dashed: true },\n            { key: \"aot2\", color: \"#F1C40F\", width: 2 },\n            { key: \"pilot\", color: \"#27AE60\", width: 2 }\n        ]);\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <Legend\n                            type=\"swatch\"\n                            style={style}\n                            categories={[\n                                {\n                                    key: \"aot1\",\n                                    label: \"AOT 1\",\n                                    style: { fill: \"#2980B9\" }\n                                },\n                                {\n                                    key: \"aot2\",\n                                    label: \"AOT 2\",\n                                    style: { fill: \"#F1C40F\" }\n                                },\n                                {\n                                    key: \"pilot\",\n                                    label: \"PILOT\",\n                                    style: { fill: \"#27AE60\" }\n                                }\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-8\">\n                        <span style={dateStyle}>{latestTime}</span>\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer timeRange={timeRange}>\n                                <ChartRow height=\"200\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"Value\"\n                                        min={-2}\n                                        max={20}\n                                        width=\"50\"\n                                        type=\"linear\"\n                                    />\n                                    {charts}\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Export example\nexport default realtime;\n\n\n"]},"metadata":{},"sourceType":"module"}