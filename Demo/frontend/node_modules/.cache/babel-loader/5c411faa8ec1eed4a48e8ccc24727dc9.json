{"ast":null,"code":"import _classCallCheck from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js\";\n\n/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport Ring from \"ringjs\";\nimport { TimeSeries, TimeRange, TimeEvent, Pipeline as pipeline, Stream, EventOut, percentile } from \"pondjs\";\nimport { ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler } from \"react-timeseries-charts\";\nimport socketIOClient from \"socket.io-client\";\nvar sec = 1000;\nvar minute = 60 * sec;\nvar hours = 60 * minute;\nvar rate = 1000;\n\nvar realtime =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(realtime, _React$Component);\n\n  function realtime() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, realtime);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(realtime)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      time: new Date(),\n      events: new Ring(100),\n      nose_angle_events: new Ring(100),\n      socket: socketIOClient(\"http://localhost:3001/\")\n    };\n\n    _this.getNewEvent = function (t) {\n      // const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n      var base = Math.sin(t.getTime() / 10000000) * 16 + 20; // return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n\n      return new TimeEvent(t, parseInt(base + Math.random() * 5, 10));\n    };\n\n    return _this;\n  }\n\n  _createClass(realtime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //\n      // Setup our aggregation pipelines\n      //\n      this.stream = new Stream(); //\n      // Setup our interval to advance the time and generate raw events\n      //\n\n      var increment = 5 * sec;\n      this.interval = setInterval(function () {\n        var t = new Date(_this2.state.time.getTime() + increment);\n\n        var event = _this2.getNewEvent(t); // Raw events\n\n\n        var newEvents = _this2.state.events;\n        newEvents.push(event); // console.log(JSON.stringify(event))\n\n        _this2.setState({\n          time: t,\n          events: newEvents\n        }); // Let our aggregators process the event\n\n\n        _this2.stream.addEvent(event);\n      }, rate);\n      this.state.socket.on(\"nose_angle\", function (newAngle) {\n        var t = new Date();\n        var event = new TimeEvent(t, newAngle);\n        var newNoseAngleEvents = _this2.state.nose_angle_events;\n        newNoseAngleEvents.push(event);\n\n        _this2.setState({\n          time: t,\n          nose_angle_events: newNoseAngleEvents\n        });\n\n        console.log(\"nose_angle event handled in RealTimeChart\");\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var latestTime = \"\".concat(this.state.time);\n      var scatterStyle = {\n        value: {\n          normal: {\n            fill: \"steelblue\",\n            opacity: 0.9\n          }\n        }\n      }; //\n      // Create a TimeSeries for our raw and nose_angle events\n      //\n\n      var eventSeries = new TimeSeries({\n        name: \"raw\",\n        events: this.state.events.toArray()\n      });\n      var noseAngleEventSeries = new TimeSeries({\n        name: \"nose_angle\",\n        events: this.state.nose_angle_events.toArray()\n      }); // Timerange for the chart axis\n\n      var initialBeginTime = new Date();\n      var timeWindow = 1 * hours;\n      var beginTime; // const endTime = new Date(this.state.time.getTime() + minute);\n\n      var endTime = new Date(this.state.time.getTime()); // const endTime = new Date(initialBeginTime.getTime() + hours);\n\n      if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n        beginTime = initialBeginTime;\n      } else {\n        beginTime = new Date(endTime.getTime() - timeWindow);\n      }\n\n      var timeRange = new TimeRange(initialBeginTime, endTime); // console.log(`beginTime : ${beginTime}`)\n      // console.log(`endTime : ${endTime}`)\n      // console.log(`timeRange : ${timeRange.toString()}`)\n      // Charts (after a certain amount of time, just show hourly rollup)\n\n      var charts = React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: eventSeries,\n        style: scatterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: noseAngleEventSeries,\n        style: scatterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }));\n      var dateStyle = {\n        fontSize: 12,\n        color: \"#AAA\",\n        borderWidth: 1,\n        borderColor: \"#F4F4F4\"\n      };\n      var style = styler([{\n        key: \"aot1\",\n        color: \"#2980B9\",\n        width: 1,\n        dashed: true\n      }, {\n        key: \"aot2\",\n        color: \"#F1C40F\",\n        width: 2\n      }, {\n        key: \"pilot\",\n        color: \"#27AE60\",\n        width: 2\n      }]);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        type: \"swatch\",\n        style: style,\n        categories: [{\n          key: \"aot1\",\n          label: \"AOT 1\",\n          style: {\n            fill: \"#2980B9\"\n          }\n        }, {\n          key: \"aot2\",\n          label: \"AOT 2\",\n          style: {\n            fill: \"#F1C40F\"\n          }\n        }, {\n          key: \"pilot\",\n          label: \"PILOT\",\n          style: {\n            fill: \"#27AE60\"\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: dateStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, latestTime))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Resizable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(ChartContainer, {\n        timeRange: timeRange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(ChartRow, {\n        height: \"200\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"y\",\n        label: \"Value\",\n        min: -2,\n        max: 20,\n        width: \"50\",\n        type: \"linear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), charts))))));\n    }\n  }]);\n\n  return realtime;\n}(React.Component); // Export example\n\n\nrealtime.displayName = \"AggregatorDemo\";\nexport default realtime;","map":{"version":3,"sources":["/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js"],"names":["React","Ring","TimeSeries","TimeRange","TimeEvent","Pipeline","pipeline","Stream","EventOut","percentile","ChartContainer","ChartRow","Charts","YAxis","ScatterChart","BarChart","Resizable","Legend","styler","socketIOClient","sec","minute","hours","rate","realtime","state","time","Date","events","nose_angle_events","socket","getNewEvent","t","base","Math","sin","getTime","parseInt","random","stream","increment","interval","setInterval","event","newEvents","push","setState","addEvent","on","newAngle","newNoseAngleEvents","console","log","clearInterval","latestTime","scatterStyle","value","normal","fill","opacity","eventSeries","name","toArray","noseAngleEventSeries","initialBeginTime","timeWindow","beginTime","endTime","timeRange","charts","dateStyle","fontSize","color","borderWidth","borderColor","style","key","width","dashed","label","Component","displayName"],"mappings":"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","sourcesContent":["/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport Ring from \"ringjs\";\n\nimport {\n    TimeSeries,\n    TimeRange,\n    TimeEvent,\n    Pipeline as pipeline,\n    Stream,\n    EventOut,\n    percentile\n} from \"pondjs\";\n\nimport {ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler} from \"react-timeseries-charts\";\n\nimport socketIOClient from \"socket.io-client\";\n\n\nconst sec = 1000;\nconst minute = 60 * sec;\nconst hours = 60 * minute;\nconst rate = 1000;\n\nclass realtime extends React.Component {\n    static displayName = \"AggregatorDemo\";\n\n    state = {\n        time: new Date(),\n        events: new Ring(100),\n        nose_angle_events: new Ring(100), \n        socket: socketIOClient(\"http://localhost:3001/\") \n    };\n\n    getNewEvent = t => {\n        // const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n\n        const base = Math.sin(t.getTime() / 10000000) * 16 + 20\n\n        // return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n\n        return new TimeEvent(t, parseInt(base + Math.random() * 5, 10));\n    };\n\n    componentDidMount() {\n        //\n        // Setup our aggregation pipelines\n        //\n\n        this.stream = new Stream();\n\n        //\n        // Setup our interval to advance the time and generate raw events\n        //\n\n        const increment = 5 * sec;\n        this.interval = setInterval(() => {\n            const t = new Date(this.state.time.getTime() + increment);\n            const event = this.getNewEvent(t);\n\n            // Raw events\n            const newEvents = this.state.events;\n            newEvents.push(event);\n            // console.log(JSON.stringify(event))\n            this.setState({ time: t, events: newEvents });\n\n            // Let our aggregators process the event\n            this.stream.addEvent(event);\n        }, rate);\n\n        this.state.socket.on(\"nose_angle\", (newAngle) => {\n            const t = new Date()\n            const event = new TimeEvent(t, newAngle)\n            const newNoseAngleEvents = this.state.nose_angle_events\n            newNoseAngleEvents.push(event)\n            this.setState({ time: t, nose_angle_events: newNoseAngleEvents });\n            console.log(\"nose_angle event handled in RealTimeChart\")\n        })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const latestTime = `${this.state.time}`;\n\n        const scatterStyle = {\n            value: {\n                normal: {\n                    fill: \"steelblue\",\n                    opacity: 0.9\n                }\n            }\n        };\n\n        //\n        // Create a TimeSeries for our raw and nose_angle events\n        //\n\n        const eventSeries = new TimeSeries({\n            name: \"raw\",\n            events: this.state.events.toArray()\n        });\n\n        const noseAngleEventSeries = new TimeSeries({\n            name: \"nose_angle\", \n            events: this.state.nose_angle_events.toArray()\n        })\n\n        // Timerange for the chart axis\n        const initialBeginTime = new Date();\n        const timeWindow = 1 * hours;\n\n        let beginTime;\n        // const endTime = new Date(this.state.time.getTime() + minute);\n        const endTime = new Date(this.state.time.getTime());\n        // const endTime = new Date(initialBeginTime.getTime() + hours);\n        if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n            beginTime = initialBeginTime;\n        } else {\n            beginTime = new Date(endTime.getTime() - timeWindow);\n        }\n        const timeRange = new TimeRange(initialBeginTime, endTime);\n        \n        // console.log(`beginTime : ${beginTime}`)\n        // console.log(`endTime : ${endTime}`)\n        // console.log(`timeRange : ${timeRange.toString()}`)\n\n        // Charts (after a certain amount of time, just show hourly rollup)\n        const charts = (\n            <Charts>\n                <ScatterChart axis=\"y\" series={eventSeries} style={scatterStyle} />\n                <ScatterChart axis=\"y\" series={noseAngleEventSeries} style={scatterStyle} />                \n            </Charts>\n        );\n\n        const dateStyle = {\n            fontSize: 12,\n            color: \"#AAA\",\n            borderWidth: 1,\n            borderColor: \"#F4F4F4\"\n        };\n\n        const style = styler([\n            { key: \"aot1\", color: \"#2980B9\", width: 1, dashed: true },\n            { key: \"aot2\", color: \"#F1C40F\", width: 2 },\n            { key: \"pilot\", color: \"#27AE60\", width: 2 }\n        ]);\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <Legend\n                            type=\"swatch\"\n                            style={style}\n                            categories={[\n                                {\n                                    key: \"aot1\",\n                                    label: \"AOT 1\",\n                                    style: { fill: \"#2980B9\" }\n                                },\n                                {\n                                    key: \"aot2\",\n                                    label: \"AOT 2\",\n                                    style: { fill: \"#F1C40F\" }\n                                },\n                                {\n                                    key: \"pilot\",\n                                    label: \"PILOT\",\n                                    style: { fill: \"#27AE60\" }\n                                }\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-8\">\n                        <span style={dateStyle}>{latestTime}</span>\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer timeRange={timeRange}>\n                                <ChartRow height=\"200\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"Value\"\n                                        min={-2}\n                                        max={20}\n                                        width=\"50\"\n                                        type=\"linear\"\n                                    />\n                                    {charts}\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Export example\nexport default realtime;"]},"metadata":{},"sourceType":"module"}