{"ast":null,"code":"import _classCallCheck from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js\";\n\n/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport Ring from \"ringjs\";\nimport { TimeSeries, TimeRange, TimeEvent, Pipeline as pipeline, Stream, EventOut, percentile } from \"pondjs\";\nimport { ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler } from \"react-timeseries-charts\";\nimport socketIOClient from \"socket.io-client\";\nvar sec = 1000;\nvar minute = 60 * sec;\nvar hours = 60 * minute;\nvar rate = 1000;\n\nvar realtime =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(realtime, _React$Component);\n\n  function realtime(props) {\n    var _this;\n\n    _classCallCheck(this, realtime);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(realtime).call(this, props));\n\n    _this.getNewEvent = function (t) {\n      // const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n      var base = Math.sin(t.getTime() / 10000000) * 16 + 20; // return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n\n      return new TimeEvent(t, parseInt(base + Math.random() * 5, 10));\n    };\n\n    console.log(\"aot1: \".concat(JSON.stringify(_this.props.aot1)));\n    _this.state = {\n      beginTime: new Date(),\n      time: new Date(),\n      events: new Ring(100),\n      nose_angle_events: new Ring(200),\n      aot1_events: new Ring(200),\n      aot2_events: new Ring(200),\n      socket: socketIOClient(\"http://localhost:3001/\")\n    };\n    return _this;\n  }\n\n  _createClass(realtime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //\n      // Setup our interval to advance the time and generate raw events\n      //\n      this.intervalNoseAngle = setInterval(function () {\n        // const t = new Date(this.state.time.getTime()+sec)\n        var t = new Date();\n        var event = new TimeEvent(t, _this2.props.noseAngle);\n        var newNoseAngleEvents = _this2.state.nose_angle_events;\n        newNoseAngleEvents.push(event);\n\n        _this2.setState({\n          time: t,\n          nose_angle_events: newNoseAngleEvents\n        }); // console.log(\"nose_angle event handled in RealTimeChart\")\n\n      }, 30);\n      this.intervalAot1 = setInterval(function () {\n        var t = new Date();\n        var event = new TimeEvent(t, _this2.props.aot1.data);\n        var newAot1Events = _this2.state.aot1_events;\n        newAot1Events.push(event);\n\n        _this2.setState({\n          time: t,\n          aot1_events: newAot1Events\n        });\n      }, 30);\n      this.intervalAot2 = setInterval(function () {\n        var t = new Date();\n        var event = new TimeEvent(t, _this2.props.aot2.data);\n        var newAot2Events = _this2.state.aot2_events;\n        newAot2Events.push(event);\n\n        _this2.setState({\n          time: t,\n          aot2_events: newAot2Events\n        });\n      }, 30);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalNoseAngle);\n      clearInterval(this.intervalAot1);\n      clearInterval(this.intervalAot2);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var latestTime = \"\".concat(this.state.time);\n      var scatterStyle = {\n        value: {\n          normal: {\n            fill: \"#E74C3C\",\n            opacity: 0.9\n          }\n        }\n      };\n      var styleAot1 = {\n        value: {\n          normal: {\n            fill: \"#2980B9\",\n            opacity: 0.9\n          }\n        }\n      };\n      var styleAot2 = {\n        value: {\n          normal: {\n            fill: \"#F1C40F\",\n            opacity: 0.9\n          }\n        } //\n        // Create a TimeSeries for our raw and nose_angle events\n        //\n\n      };\n      var noseAngleEventSeries = new TimeSeries({\n        name: \"nose_angle\",\n        events: this.state.nose_angle_events.toArray()\n      });\n      var aot1EventSeries = new TimeSeries({\n        name: \"aot1\",\n        events: this.state.aot1_events.toArray()\n      });\n      var aot2EventSeries = new TimeSeries({\n        name: \"aot2\",\n        events: this.state.aot2_events.toArray()\n      }); // Timerange for the chart axis\n\n      var initialBeginTime = new Date();\n      var timeWindow = 1 * minute;\n      var beginTime = this.state.beginTime;\n      var endTime = new Date();\n\n      if (endTime.getTime() - beginTime.getTime() > 5000) {\n        beginTime = new Date(endTime.getTime() - 5000); // console.log(`CONDITIONAL: ${endTime.getTime() - beginTime.getTime()}`)\n      }\n\n      var timeRange = new TimeRange(beginTime, endTime); // console.log(`\\ncurrent time : ${(new Date()).getTime()}`)\n      // console.log(`beginTime : ${beginTime.getTime()}`)\n      // console.log(`endTime : ${endTime.getTime()}`)\n      // console.log(`timeRange : ${timeRange.toString()}`)\n      // Charts (after a certain amount of time, just show hourly rollup)\n\n      var charts = React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: noseAngleEventSeries,\n        style: scatterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: aot1EventSeries,\n        style: styleAot1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(ScatterChart, {\n        axis: \"y\",\n        series: aot2EventSeries,\n        style: styleAot2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }));\n      var dateStyle = {\n        fontSize: 12,\n        color: \"#AAA\",\n        borderWidth: 1,\n        borderColor: \"#F4F4F4\"\n      };\n      var style = styler([{\n        key: \"aot1\",\n        color: \"#2980B9\",\n        width: 1,\n        dashed: true\n      }, {\n        key: \"aot2\",\n        color: \"#F1C40F\",\n        width: 2\n      }, {\n        key: \"nose_angle\",\n        color: \"#E74C3C\",\n        width: 2\n      }]);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        type: \"swatch\",\n        style: style,\n        categories: [{\n          key: \"aot1\",\n          label: \"AOT 1\",\n          style: {\n            fill: \"#2980B9\"\n          }\n        }, {\n          key: \"aot2\",\n          label: \"AOT 2\",\n          style: {\n            fill: \"#F1C40F\"\n          }\n        }, {\n          key: \"nose_angle\",\n          label: \"NOSE ANGLE\",\n          style: {\n            fill: \"#E74C3C\"\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: dateStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, latestTime))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Resizable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(ChartContainer, {\n        timeRange: timeRange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(ChartRow, {\n        height: \"200\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"y\",\n        label: \"Value\",\n        min: -2,\n        max: 20,\n        width: \"50\",\n        type: \"linear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), charts))))));\n    }\n  }]);\n\n  return realtime;\n}(React.Component); // Export example\n\n\nexport default realtime;","map":{"version":3,"sources":["/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/RealTimeChart.js"],"names":["React","Ring","TimeSeries","TimeRange","TimeEvent","Pipeline","pipeline","Stream","EventOut","percentile","ChartContainer","ChartRow","Charts","YAxis","ScatterChart","BarChart","Resizable","Legend","styler","socketIOClient","sec","minute","hours","rate","realtime","props","getNewEvent","t","base","Math","sin","getTime","parseInt","random","console","log","JSON","stringify","aot1","state","beginTime","Date","time","events","nose_angle_events","aot1_events","aot2_events","socket","intervalNoseAngle","setInterval","event","noseAngle","newNoseAngleEvents","push","setState","intervalAot1","data","newAot1Events","intervalAot2","aot2","newAot2Events","clearInterval","latestTime","scatterStyle","value","normal","fill","opacity","styleAot1","styleAot2","noseAngleEventSeries","name","toArray","aot1EventSeries","aot2EventSeries","initialBeginTime","timeWindow","endTime","timeRange","charts","dateStyle","fontSize","color","borderWidth","borderColor","style","key","width","dashed","label","Component"],"mappings":"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","sourcesContent":["/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport Ring from \"ringjs\";\n\nimport {\n    TimeSeries,\n    TimeRange,\n    TimeEvent,\n    Pipeline as pipeline,\n    Stream,\n    EventOut,\n    percentile\n} from \"pondjs\";\n\nimport {ChartContainer, ChartRow, Charts, YAxis, ScatterChart, BarChart, Resizable, Legend, styler} from \"react-timeseries-charts\";\n\nimport socketIOClient from \"socket.io-client\";\n\n\nconst sec = 1000;\nconst minute = 60 * sec;\nconst hours = 60 * minute;\nconst rate = 1000;\n\nclass realtime extends React.Component {\n    constructor(props) {\n        super(props)\n        \n        console.log(`aot1: ${JSON.stringify(this.props.aot1)}`)\n\n        this.state = {\n            beginTime: new Date(),\n            time: new Date(),\n            events: new Ring(100),\n            nose_angle_events: new Ring(200), \n            aot1_events: new Ring(200), \n            aot2_events: new Ring(200),\n            socket: socketIOClient(\"http://localhost:3001/\") \n        };\n    }\n\n\n    getNewEvent = t => {\n        // const base = Math.sin(t.getTime() / 10000000) * 350 + 500;\n\n        const base = Math.sin(t.getTime() / 10000000) * 16 + 20\n\n        // return new TimeEvent(t, parseInt(base + Math.random() * 1000, 10));\n\n        return new TimeEvent(t, parseInt(base + Math.random() * 5, 10));\n    };\n\n    componentDidMount() {\n        //\n        // Setup our interval to advance the time and generate raw events\n        //\n\n        this.intervalNoseAngle = setInterval(() => {\n            // const t = new Date(this.state.time.getTime()+sec)\n            const t = new Date()\n            const event = new TimeEvent(t, this.props.noseAngle)\n            const newNoseAngleEvents = this.state.nose_angle_events\n            newNoseAngleEvents.push(event)\n            this.setState({ time: t, nose_angle_events: newNoseAngleEvents });\n            // console.log(\"nose_angle event handled in RealTimeChart\")\n        }, 30)\n\n        this.intervalAot1 = setInterval(() => {\n            const t = new Date()\n            const event = new TimeEvent(t, this.props.aot1.data)\n            const newAot1Events = this.state.aot1_events\n            newAot1Events.push(event)\n            this.setState({time: t, aot1_events: newAot1Events})\n        }, 30)\n        \n\n        this.intervalAot2 = setInterval(() => {\n            const t = new Date()\n            const event = new TimeEvent(t, this.props.aot2.data)\n            const newAot2Events = this.state.aot2_events\n            newAot2Events.push(event)\n            this.setState({time: t, aot2_events: newAot2Events})\n        }, 30)\n        \n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalNoseAngle);\n        clearInterval(this.intervalAot1)\n        clearInterval(this.intervalAot2)\n    }\n\n    render() {\n        const latestTime = `${this.state.time}`;\n\n        const scatterStyle = {\n            value: {\n                normal: {\n                    fill: \"#E74C3C\",\n                    opacity: 0.9\n                }\n            }\n        };\n\n        const styleAot1 = {\n            value: {\n                normal: {\n                    fill: \"#2980B9\",\n                    opacity: 0.9\n                }\n            }\n        }\n\n        const styleAot2 = {\n            value: {\n                normal: {\n                    fill: \"#F1C40F\", \n                    opacity: 0.9\n                }\n            }\n        }\n\n        //\n        // Create a TimeSeries for our raw and nose_angle events\n        //\n\n        const noseAngleEventSeries = new TimeSeries({\n            name: \"nose_angle\", \n            events: this.state.nose_angle_events.toArray()\n        })\n\n        const aot1EventSeries = new TimeSeries({\n            name: \"aot1\", \n            events: this.state.aot1_events.toArray()\n        })\n\n        const aot2EventSeries = new TimeSeries({\n            name: \"aot2\", \n            events: this.state.aot2_events.toArray()\n        })\n\n        // Timerange for the chart axis\n        const initialBeginTime = new Date();\n        const timeWindow = 1 * minute;\n\n        let beginTime = this.state.beginTime;\n        let endTime = new Date()\n\n        if (endTime.getTime() - beginTime.getTime() > 5000){\n            beginTime = new Date(endTime.getTime() - 5000)\n            // console.log(`CONDITIONAL: ${endTime.getTime() - beginTime.getTime()}`)\n        }\n\n        const timeRange = new TimeRange(beginTime, endTime);\n        // console.log(`\\ncurrent time : ${(new Date()).getTime()}`)\n        // console.log(`beginTime : ${beginTime.getTime()}`)\n        // console.log(`endTime : ${endTime.getTime()}`)\n        // console.log(`timeRange : ${timeRange.toString()}`)\n\n        // Charts (after a certain amount of time, just show hourly rollup)\n        const charts = (\n            <Charts>\n                <ScatterChart axis=\"y\" series={noseAngleEventSeries} style={scatterStyle} />   \n                <ScatterChart axis=\"y\" series={aot1EventSeries} style={styleAot1} />\n                <ScatterChart axis=\"y\" series={aot2EventSeries} style={styleAot2} />\n            </Charts>\n        );\n\n        const dateStyle = {\n            fontSize: 12,\n            color: \"#AAA\",\n            borderWidth: 1,\n            borderColor: \"#F4F4F4\"\n        };\n\n        const style = styler([\n            { key: \"aot1\", color: \"#2980B9\", width: 1, dashed: true },\n            { key: \"aot2\", color: \"#F1C40F\", width: 2 },\n            { key: \"nose_angle\", color: \"#E74C3C\", width: 2 }\n        ]);\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <Legend\n                            type=\"swatch\"\n                            style={style}\n                            categories={[\n                                {\n                                    key: \"aot1\",\n                                    label: \"AOT 1\",\n                                    style: { fill: \"#2980B9\" }\n                                },\n                                {\n                                    key: \"aot2\",\n                                    label: \"AOT 2\",\n                                    style: { fill: \"#F1C40F\" }\n                                },\n                                {\n                                    key: \"nose_angle\",\n                                    label: \"NOSE ANGLE\",\n                                    style: { fill: \"#E74C3C\" }\n                                }\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-8\">\n                        <span style={dateStyle}>{latestTime}</span>\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer timeRange={timeRange}>\n                                <ChartRow height=\"200\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"Value\"\n                                        min={-2}\n                                        max={20}\n                                        width=\"50\"\n                                        type=\"linear\"\n                                    />\n                                    {charts}\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Export example\nexport default realtime;\n\n\n"]},"metadata":{},"sourceType":"module"}