{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _underscore = require(\"underscore\");\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nvar _merge = require(\"merge\");\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _pondjs = require(\"pondjs\");\n\nvar _EventMarker = require(\"./EventMarker\");\n\nvar _EventMarker2 = _interopRequireDefault(_EventMarker);\n\nvar _styler = require(\"../js/styler\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n *  Copyright (c) 2015-present, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\nvar defaultStyle = {\n  normal: {\n    fill: \"steelblue\",\n    opacity: 0.8\n  },\n  highlighted: {\n    fill: \"steelblue\",\n    opacity: 1.0\n  },\n  selected: {\n    fill: \"steelblue\",\n    opacity: 1.0\n  },\n  muted: {\n    fill: \"steelblue\",\n    opacity: 0.4\n  }\n};\n/**\n * Renders a bar chart based on IndexedEvents within a TimeSeries.\n *\n * This BarChart implementation is a little different that other time axis\n * bar charts in that it will render across a the time range of the event\n * rather than rendering to specific categories. As a result,\n * a Aug-2014 bar will render between the Aug 2014 tick mark and\n * the Sept 2014 tickmark. However, this allows it to play well with other\n * types of charts that maybe integrated into the same visualization.\n *\n * The BarChart will render a single TimeSeries. You can specify the columns\n * you want to render with the `columns` prop. Each column will be stacked on\n * the other, in the order specified in the `columns` array.\n *\n * ### IndexedEvents\n *\n * BarCharts are supposed to be for aggregated values (e.g. average of\n * many points over an hour), so the hours themselves are specified\n * with an \"Index\". An Index is a string that represents that range of time,\n * rather than a specific time like a timestamp would.\n *\n * Pond provides several mechanisms for building aggregated series from\n * a TimeSeries, and the BarChart code is suited to visualizing that\n * output. See Pond for more details (especially TimeSeries.fixedWindowRollup\n * and the Pipeline processing facilities). The realtime example in this\n * library also shows how to do this on incoming streams of data.\n *\n * If you have one timestamped point per hour and really want to represent\n * those with a BarChart, you can use the Pond static method\n * `Index.getIndexString(period, date)` to take the Date and return an\n * Index string. Say if those points were hourly, you'll end up with\n * strings that look like \"1h-412715\". This represents a specific hour\n * in time (the 412,715th hour since midnight 1 Jan 1970, actually).\n * Note that for larger time periods, index strings can be partial\n * dates, like \"2016-08-31\" for Aug 31st, 2016 or \"2016-08\" for Aug 2016.\n *\n * Use those index strings to build your timeseries instead of timestamps.\n * Here's the Pond code needed to convert a date to an index string:\n *\n * ```\n *   import { Index } from \"pondjs\";\n *   const d = new Date(\"2017-01-30T11:58:38.741Z\");\n *   const index = Index.getIndexString(\"1h\", d);   // '1h-412715'\n * ```\n *\n * With either the aggregated approach, or the above timestamped\n * conversion, you will want a `TimeSeries` of `IndexedEvent`s that\n * looks like this:\n * ```\n *   const series = new TimeSeries({\n *     name: \"myseries\",\n *     columns: [\"index\", \"value\"],\n *     points: [\n *       [\"1h-41275\", 22],\n *       [\"1h-41276\", 35],\n *       [\"1h-41277\", 72],\n *       ...\n *     ]\n *   })\n * ```\n *\n * Note: the first column of the timeseries should be \"index\" (not \"time\")\n * and each point should have an index string at the beginning.\n *\n * ### Interactivity\n *\n * The BarChart supports selection of individual bars. To control this use\n * `onSelectionChange` to get a callback of selection changed. Your callback\n * will be called with the selection (an object containing the event\n * and column). You can pass this back into the BarChart as `selection`. For\n * example:\n *\n * ```\n *  <BarChart\n *      ...\n *      selection={this.state.selection}\n *      onSelectionChange={selection => this.setState({selection})} />\n * ```\n *\n * Similarly you can monitor which bar is being hovered over with the\n * `onHighlightChange` callback. This can be used to determine the info box\n * to display. Info box will display a box (like a tooltip) with a line\n * connecting it to the bar. You use the `info` prop to evoke this and to\n * supply the text for the info box. See the styling notes below for more\n * information on this.\n *\n * ### Styling\n *\n * A BarChart supports per-column or per-event styling. Styles can be set for\n * each of the four states that are possible: normal, highlighted,\n * selected and muted. To style per-column, supply an object. For per-event styling\n * supply a function: `(event, column) => {}` The functon should return a style object.\n *\n * See the `style` prop in the API documentation for more information.\n *\n * Separately the size of the bars can be controlled with the `spacing` and\n * `offset` props. Spacing controls the gap between the bars. Offset moves the\n * bars left or right by the given number of pixels. You can use this to place\n * bars along side each other. Alternatively, you can give each column a fixed width\n * using the `size` prop. In this case this size will be used in preference to the size\n * determined from the timerange of the event and the `spacing`.\n *\n * The info box is also able to be styled using `infoStyle`, `stemStyle` and\n * `markerStyle` This enables you to control the drawing of the box, the connecting\n * lines (stem) and dot respectively. Using the `infoWidth` and `infoHeight`\n * props you can control the size of the box, which is fixed. For the info inside\n * the box, it's up to you: it can either be a simple string or an array of\n * {label, value} pairs.\n */\n\nvar BarChart = function (_React$Component) {\n  _inherits(BarChart, _React$Component);\n\n  function BarChart() {\n    _classCallCheck(this, BarChart);\n\n    return _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));\n  }\n\n  _createClass(BarChart, [{\n    key: \"handleHover\",\n    value: function handleHover(e, event, column) {\n      var bar = {\n        event: event,\n        column: column\n      };\n\n      if (this.props.onHighlightChange) {\n        this.props.onHighlightChange(bar);\n      }\n    }\n  }, {\n    key: \"handleHoverLeave\",\n    value: function handleHoverLeave() {\n      if (this.props.onHighlightChange) {\n        this.props.onHighlightChange(null);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e, event, column) {\n      var bar = {\n        event: event,\n        column: column\n      };\n\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange(bar);\n      }\n\n      e.stopPropagation();\n    }\n  }, {\n    key: \"providedStyleMap\",\n    value: function providedStyleMap(column, event) {\n      var style = {};\n\n      if (this.props.style) {\n        if (this.props.style instanceof _styler.Styler) {\n          style = this.props.style.barChartStyle()[column];\n        } else if (_underscore2.default.isFunction(this.props.style)) {\n          style = this.props.style(column, event);\n        } else if (_underscore2.default.isObject(this.props.style)) {\n          style = this.props.style ? this.props.style[column] : defaultStyle;\n        }\n      }\n\n      return style;\n    }\n    /**\n     * Returns the style used for drawing the path\n     */\n\n  }, {\n    key: \"style\",\n    value: function style(column, event) {\n      var style = void 0;\n      var styleMap = this.providedStyleMap(column, event);\n\n      var isHighlighted = this.props.highlighted && (column === this.props.highlighted.column && _pondjs.Event.is(this.props.highlighted.event, event) || this.props.highlightEntireEvent && _pondjs.Event.is(this.props.highlighted.event, event));\n\n      var isSelected = this.props.selected && column === this.props.selected.column && _pondjs.Event.is(this.props.selected.event, event);\n\n      if (this.props.selected) {\n        if (isSelected) {\n          style = (0, _merge2.default)(true, defaultStyle.selected, styleMap.selected ? styleMap.selected : {});\n        } else if (isHighlighted) {\n          style = (0, _merge2.default)(true, defaultStyle.highlighted, styleMap.highlighted ? styleMap.highlighted : {});\n        } else {\n          style = (0, _merge2.default)(true, defaultStyle.muted, styleMap.muted ? styleMap.muted : {});\n        }\n      } else if (isHighlighted) {\n        style = (0, _merge2.default)(true, defaultStyle.highlighted, styleMap.highlighted ? styleMap.highlighted : {});\n      } else {\n        style = (0, _merge2.default)(true, defaultStyle.normal, styleMap.normal ? styleMap.normal : {});\n      }\n\n      return style;\n    }\n  }, {\n    key: \"renderBars\",\n    value: function renderBars() {\n      var _this2 = this;\n\n      var spacing = +this.props.spacing;\n      var offset = +this.props.offset;\n      var minBarHeight = this.props.minBarHeight;\n      var series = this.props.series;\n      var timeScale = this.props.timeScale;\n      var yScale = this.props.yScale;\n      var columns = this.props.columns || [\"value\"];\n      var bars = [];\n      var eventMarker = void 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var event = _step.value;\n          var begin = event.begin();\n          var end = event.end();\n          var beginPos = timeScale(begin) + spacing;\n          var endPos = timeScale(end) - spacing;\n          var width = void 0;\n\n          if (_this2.props.size) {\n            width = _this2.props.size;\n          } else {\n            width = endPos - beginPos;\n          }\n\n          if (width < 1) {\n            width = 1;\n          }\n\n          var x = void 0;\n\n          if (_this2.props.size) {\n            var center = timeScale(begin) + (timeScale(end) - timeScale(begin)) / 2;\n            x = center - _this2.props.size / 2 + offset;\n          } else {\n            x = timeScale(begin) + spacing + offset;\n          }\n\n          var yBase = yScale(0);\n          var yposPositive = yBase;\n          var yposNegative = yBase;\n\n          if (columns) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              var _loop2 = function _loop2() {\n                var column = _step2.value;\n                var index = event.index();\n                var key = series.name() + \"-\" + index + \"-\" + column;\n                var value = event.get(column);\n\n                var style = _this2.style(column, event);\n\n                var height = yScale(0) - yScale(value); // Allow negative values. Minimum bar height = 1 pixel.\n                // Stack negative bars below X-axis and positive above X-Axis\n\n                var positiveBar = height >= 0;\n                height = Math.max(Math.abs(height), minBarHeight);\n                var y = positiveBar ? yposPositive - height : yposNegative; // Don't draw a rect when height and minBarHeight are both 0\n\n                if (height === 0) return \"break\"; // Event marker if info provided and hovering\n\n                var isHighlighted = _this2.props.highlighted && column === _this2.props.highlighted.column && _pondjs.Event.is(_this2.props.highlighted.event, event);\n\n                if (isHighlighted && _this2.props.info) {\n                  eventMarker = _react2.default.createElement(_EventMarker2.default, _extends({}, _this2.props, {\n                    event: event,\n                    column: column,\n                    offsetX: offset,\n                    offsetY: yBase - (positiveBar ? yposPositive : yposNegative)\n                  }));\n                }\n\n                var box = {\n                  x: x,\n                  y: y,\n                  width: width,\n                  height: height\n                };\n\n                var barProps = _extends({\n                  key: key\n                }, box, {\n                  style: style\n                });\n\n                if (_this2.props.onSelectionChange) {\n                  barProps.onClick = function (e) {\n                    return _this2.handleClick(e, event, column);\n                  };\n                }\n\n                if (_this2.props.onHighlightChange) {\n                  barProps.onMouseMove = function (e) {\n                    return _this2.handleHover(e, event, column);\n                  };\n\n                  barProps.onMouseLeave = function () {\n                    return _this2.handleHoverLeave();\n                  };\n                }\n\n                bars.push(_react2.default.createElement(\"rect\", barProps));\n\n                if (positiveBar) {\n                  yposPositive -= height;\n                } else {\n                  yposNegative += height;\n                }\n              };\n\n              for (var _iterator2 = columns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var _ret2 = _loop2();\n\n                if (_ret2 === \"break\") break;\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        };\n\n        for (var _iterator = series.events()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return _react2.default.createElement(\"g\", null, bars, eventMarker);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"g\", null, this.renderBars());\n    }\n  }]);\n\n  return BarChart;\n}(_react2.default.Component);\n\nexports.default = BarChart;\nBarChart.propTypes = {\n  /**\n   * Show or hide this chart\n   */\n  visible: _propTypes2.default.bool,\n\n  /**\n   * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries)\n   * data to visualize\n   */\n  series: _propTypes2.default.instanceOf(_pondjs.TimeSeries).isRequired,\n\n  /**\n   * The distance in pixels to inset the bar chart from its actual timerange\n   */\n  spacing: _propTypes2.default.number,\n\n  /**\n   * The distance in pixels to offset the bar from its center position within the timerange\n   * it represents\n   */\n  offset: _propTypes2.default.number,\n\n  /**\n   * The minimum height of a bar given in pixels.\n   * By default, the minimum height of a bar is 1 pixel\n   */\n  minBarHeight: _propTypes2.default.number,\n\n  /**\n   * A list of columns within the series that will be stacked on top of each other\n   *\n   * NOTE : Columns can't have periods because periods\n   * represent a path to deep data in the underlying events\n   * (i.e. reference into nested data structures)\n   */\n  columns: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\n   * When true, the entire `highlighted` event will be highlighted, instead of\n   * only the column bar that's currently being hovered\n   */\n  highlightEntireEvent: _propTypes2.default.bool,\n\n  /**\n   * The style of the bar chart drawing (using SVG CSS properties).\n   * This is an object with a key for each column which is being drawn,\n   * per the `columns` prop. For each column a style is defined for\n   * each state the bar may be in. This style is the CSS properties for\n   * the underlying SVG <Rect>, so most likely you'll define fill and\n   * opacity.\n   *\n   * For example:\n   * ```\n   * style = {\n   *     columnName: {\n   *         normal: {\n   *             fill: \"steelblue\",\n   *             opacity: 0.8,\n   *         },\n   *         highlighted: {\n   *             fill: \"#a7c4dd\",\n   *             opacity: 1.0,\n   *         },\n   *         selected: {\n   *             fill: \"orange\",\n   *             opacity: 1.0,\n   *         },\n   *         muted: {\n   *             fill: \"grey\",\n   *             opacity: 0.5\n   *         }\n   *     }\n   * }\n   * ```\n   *\n   * You can also supply a function, which will be called with an event\n   * and column. The function should return an object containing the\n   * four states (normal, highlighted, selected and muted) and the corresponding\n   * CSS properties.\n   */\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.instanceOf(_styler.Styler)]),\n\n  /**\n   * The values to show in the info box. This is an array of\n   * objects, with each object specifying the label and value\n   * to be shown in the info box.\n   */\n  info: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    label: _propTypes2.default.string,\n    //eslint-disable-line\n    value: _propTypes2.default.string //eslint-disable-line\n\n  })),\n\n  /**\n   * The style of the info box itself. Typically you'd want to\n   * specify a fill color, and stroke color / width here.\n   */\n  infoStyle: _propTypes2.default.object,\n  //eslint-disable-line\n\n  /**\n   * The width of the info box\n   */\n  infoWidth: _propTypes2.default.number,\n  //eslint-disable-line\n\n  /**\n   * The height of the info box\n   */\n  infoHeight: _propTypes2.default.number,\n  //eslint-disable-line\n\n  /**\n   * Alter the format of the timestamp shown on the info box.\n   * This may be either a function or a string. If you provide a function\n   * that will be passed an Index and should return a string. For example:\n   * ```\n   *     index => moment(index.begin()).format(\"Do MMM 'YY\")\n   * ```\n   * Alternatively you can pass in a d3 format string. That will be applied\n   * to the begin time of the Index range.\n   */\n  infoTimeFormat: _propTypes2.default.oneOfType([//eslint-disable-line\n  _propTypes2.default.string, //eslint-disable-line\n  _propTypes2.default.func //eslint-disable-line\n  ]),\n\n  /**\n   * The radius of the infoBox dot at the end of the marker\n   */\n  markerRadius: _propTypes2.default.number,\n\n  /**\n   * The style of the infoBox dot at the end of the marker\n   */\n  markerStyle: _propTypes2.default.object,\n\n  /**\n   * If size is specified, then the bar will be this number of pixels wide. This\n   * prop takes priority over \"spacing\".\n   */\n  size: _propTypes2.default.number,\n\n  /**\n   * The selected item, which will be rendered in the \"selected\" style.\n   * If a bar is selected, all other bars will be rendered in the \"muted\" style.\n   *\n   * See also `onSelectionChange`\n   */\n  selected: _propTypes2.default.shape({\n    event: _propTypes2.default.instanceOf(_pondjs.IndexedEvent),\n    column: _propTypes2.default.string\n  }),\n\n  /**\n   * A callback that will be called when the selection changes. It will be called\n   * with an object containing the event and column.\n   */\n  onSelectionChange: _propTypes2.default.func,\n\n  /**\n   * The highlighted item, which will be rendered in the \"highlighted\" style.\n   *\n   * See also `onHighlightChange`\n   */\n  highlighted: _propTypes2.default.shape({\n    event: _propTypes2.default.instanceOf(_pondjs.IndexedEvent),\n    column: _propTypes2.default.string\n  }),\n\n  /**\n   * A callback that will be called when the hovered over bar changes.\n   * It will be called with an object containing the event and column.\n   */\n  onHighlightChange: _propTypes2.default.func,\n\n  /**\n   * [Internal] The timeScale supplied by the surrounding ChartContainer\n   */\n  timeScale: _propTypes2.default.func,\n\n  /**\n   * [Internal] The yScale supplied by the associated YAxis\n   */\n  yScale: _propTypes2.default.func\n};\nBarChart.defaultProps = {\n  visible: true,\n  columns: [\"value\"],\n  highlightEntireEvent: false,\n  spacing: 1.0,\n  offset: 0,\n  minBarHeight: 1,\n  infoStyle: {\n    stroke: \"#999\",\n    fill: \"white\",\n    opacity: 0.9,\n    pointerEvents: \"none\"\n  },\n  stemStyle: {\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n  },\n  markerStyle: {\n    fill: \"#999\"\n  },\n  markerRadius: 2,\n  infoWidth: 90,\n  infoHeight: 30\n};","map":null,"metadata":{},"sourceType":"script"}