{"ast":null,"code":"import _classCallCheck from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/Chart.js\";\n\n/**\n *  Copyright (c) 2015, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/* eslint max-len:0 */\nimport React from \"react\";\nimport _ from \"underscore\";\nimport Moment from \"moment\"; // Pond\n\nimport { TimeSeries } from \"pondjs\"; // Imports from the charts library\n\nimport { ChartContainer, ChartRow, Charts, YAxis, AreaChart, LineChart, ScatterChart, Resizable, Legend, styler } from \"react-timeseries-charts\"; // import ChartRow from \"../../../../../components/ChartRow\";\n// import Charts from \"../../../../../components/Charts\";\n// import YAxis from \"../../../../../components/YAxis\";\n// import AreaChart from \"../../../../../components/AreaChart\";\n// import LineChart from \"../../../../../components/LineChart\";\n// import ScatterChart from \"../../../../../components/ScatterChart\";\n// import Resizable from \"../../../../../components/Resizable\";\n// import Legend from \"../../../../../components/Legend\";\n// import styler from \"../../../../../js/styler\";\n// Weather data\n\nimport weatherJSON from \"./weather.json\"; //\n// Read in the weather data\n//\n\nvar temperaturePoints = [];\nvar pressurePoints = [];\nvar windPoints = [];\nvar gustPoints = [];\nvar rainPoints = [];\nvar rainAccumPoints = [];\n\n_.each(weatherJSON, function (readings) {\n  var time = new Moment(readings.Time).toDate().getTime();\n  var tempReading = readings.TemperatureF;\n  var pressureReading = readings[\"PressureIn\"];\n  var windReading = readings[\"WindSpeedMPH\"] === \"Calm\" ? 0 : readings[\"WindSpeedMPH\"];\n  var gustReading = readings[\"WindSpeedGustMPH\"];\n  var rainReading = readings[\"HourlyPrecipIn\"] === \"N/A\" ? 0 : readings[\"HourlyPrecipIn\"];\n  var rainAccumReading = readings[\"dailyrainin\"];\n  temperaturePoints.push([time, tempReading]);\n  pressurePoints.push([time, pressureReading]); // Somewhat fake the wind speed...\n\n  windPoints.push([time, windReading * 5]);\n\n  if (gustReading !== \"-\" && gustReading !== 0) {\n    gustPoints.push([time, gustReading * 5 + Math.random() * 2.5 - 2.5, gustReading / 3]);\n  }\n\n  rainPoints.push([time, rainReading]);\n  rainAccumPoints.push([time, rainAccumReading]);\n}); //\n// Timeseries\n//\n\n\nvar tempSeries = new TimeSeries({\n  name: \"Temperature\",\n  columns: [\"time\", \"temp\"],\n  points: temperaturePoints\n});\nvar pressureSeries = new TimeSeries({\n  name: \"Pressure\",\n  columns: [\"time\", \"pressure\"],\n  points: pressurePoints\n});\nvar windSeries = new TimeSeries({\n  name: \"Wind\",\n  columns: [\"time\", \"wind\"],\n  points: windPoints\n});\nvar gustSeries = new TimeSeries({\n  name: \"Gust\",\n  columns: [\"time\", \"gust\", \"radius\"],\n  points: gustPoints\n});\nvar rainSeries = new TimeSeries({\n  name: \"Rain\",\n  columns: [\"time\", \"rain\"],\n  points: rainPoints\n});\nvar rainAccumSeries = new TimeSeries({\n  name: \"Rain Accum\",\n  columns: [\"time\", \"rainAccum\"],\n  points: rainAccumPoints\n}); //\n// Color scheme\n//\n\nvar scheme = {\n  temp: \"#CA4040\",\n  pressure: \"#9467bd\",\n  wind: \"#987951\",\n  gust: \"#CC862A\",\n  rain: \"#C3CBD4\",\n  rainAccum: \"#000\"\n};\nvar style = styler([{\n  key: \"temp\",\n  color: \"#CA4040\"\n}, {\n  key: \"pressure\",\n  color: \"#9467bd\"\n}, {\n  key: \"wind\",\n  color: \"#987951\"\n}, {\n  key: \"gust\",\n  color: \"#CC862A\"\n}, {\n  key: \"rain\",\n  color: \"#C3CBD4\"\n}, {\n  key: \"rainAccum\",\n  color: \"#333\"\n}]);\nvar linkStyle = {\n  fontWeight: 600,\n  color: \"grey\",\n  cursor: \"default\"\n};\nvar linkStyleActive = {\n  color: \"steelblue\",\n  cursor: \"pointer\"\n}; //\n// Render weather charts\n//\n\nvar weather =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(weather, _React$Component);\n\n  function weather() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, weather);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(weather)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tracker: null,\n      mode: \"local\"\n    };\n    return _this;\n  }\n\n  _createClass(weather, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        style: {\n          fontSize: 14,\n          color: \"#777\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: this.state.mode === \"local\" ? linkStyleActive : linkStyle,\n        onClick: function onClick() {\n          return _this2.setState({\n            mode: \"utc\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"UTC\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \" | \"), React.createElement(\"span\", {\n        style: this.state.mode === \"utc\" ? linkStyleActive : linkStyle,\n        onClick: function onClick() {\n          return _this2.setState({\n            mode: \"local\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Local\"))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(Resizable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(ChartContainer, {\n        utc: this.state.mode === \"utc\",\n        timeRange: tempSeries.timerange(),\n        showGridPosition: \"under\",\n        trackerPosition: this.state.tracker,\n        trackerTimeFormat: \"%X\",\n        onTrackerChanged: function onTrackerChanged(tracker) {\n          return _this2.setState({\n            tracker: tracker\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(ChartRow, {\n        height: \"150\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"pressure\",\n        label: \"Pressure (in)\",\n        labelOffset: 5,\n        style: style.axisStyle(\"pressure\"),\n        min: 29.5,\n        max: 30.0,\n        width: \"80\",\n        type: \"linear\",\n        format: \",.1f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        axis: \"temp\",\n        series: tempSeries,\n        columns: [\"temp\"],\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        axis: \"pressure\",\n        series: pressureSeries,\n        columns: [\"pressure\"],\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(YAxis, {\n        id: \"temp\",\n        label: \"Temperature (\\xB0F)\",\n        labelOffset: 5,\n        style: style.axisStyle(\"temp\"),\n        min: 50,\n        max: 70,\n        width: \"80\",\n        type: \"linear\",\n        format: \",.1f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      })), React.createElement(ChartRow, {\n        height: \"150\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"wind\",\n        label: \"Wind (mph)\",\n        labelOffset: 5,\n        style: {\n          labelColor: scheme.wind\n        },\n        min: 0,\n        max: 50,\n        width: \"80\",\n        type: \"linear\",\n        format: \",.1f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        axis: \"wind\",\n        series: windSeries,\n        columns: [\"wind\"],\n        interpolation: \"curveStepBefore\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(ScatterChart, {\n        axis: \"wind-gust\",\n        series: gustSeries,\n        columns: [\"gust\"],\n        style: style,\n        radius: function radius(event) {\n          return event.get(\"radius\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      })), React.createElement(YAxis, {\n        id: \"wind-gust\",\n        label: \"Wind gust (mph)\",\n        labelOffset: -5,\n        style: style.axisStyle(\"gust\"),\n        min: 0,\n        max: 50,\n        width: \"80\",\n        type: \"linear\",\n        format: \",.1f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })), React.createElement(ChartRow, {\n        height: \"150\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(YAxis, {\n        id: \"total-rain\",\n        label: \"Total Precipitation (in)\",\n        style: style.axisStyle(\"rainAccum\"),\n        labelOffset: 5,\n        min: 0,\n        max: rainAccumSeries.max(\"rainAccum\"),\n        width: \"80\",\n        type: \"linear\",\n        format: \",.2f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(Charts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(AreaChart, {\n        axis: \"rain\",\n        series: rainSeries,\n        columns: {\n          up: [\"rain\"]\n        },\n        style: style,\n        interpolation: \"curveBasis\",\n        fillOpacity: 0.4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        axis: \"total-rain\",\n        series: rainAccumSeries,\n        columns: [\"rainAccum\"],\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      })), React.createElement(YAxis, {\n        id: \"rain\",\n        label: \"Precipitation (in)\",\n        labelOffset: -5,\n        style: style.axisStyle(\"rain\"),\n        min: 0,\n        max: rainSeries.max(\"rain\"),\n        width: \"80\",\n        type: \"linear\",\n        format: \",.2f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"col-md-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        type: \"line\",\n        align: \"right\",\n        stack: true,\n        style: style,\n        categories: [{\n          key: \"temp\",\n          label: \"Temperature\"\n        }, {\n          key: \"pressure\",\n          label: \"Pressure\"\n        }, {\n          key: \"wind\",\n          label: \"Wind speed\"\n        }, {\n          key: \"gust\",\n          label: \"Gust speed\",\n          symbolType: \"dot\"\n        }, {\n          key: \"rain\",\n          label: \"Rainfall\",\n          symbolType: \"swatch\"\n        }, {\n          key: \"rainAccum\",\n          label: \"Accumulated rainfall\"\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return weather;\n}(React.Component); // Export example\n\n\nexport default weather;","map":{"version":3,"sources":["/home/cinderhoff/Documents/School/Spring19/CS595_Capstone/Capstone/Demo/src/main/Chart.js"],"names":["React","_","Moment","TimeSeries","ChartContainer","ChartRow","Charts","YAxis","AreaChart","LineChart","ScatterChart","Resizable","Legend","styler","weatherJSON","temperaturePoints","pressurePoints","windPoints","gustPoints","rainPoints","rainAccumPoints","each","readings","time","Time","toDate","getTime","tempReading","TemperatureF","pressureReading","windReading","gustReading","rainReading","rainAccumReading","push","Math","random","tempSeries","name","columns","points","pressureSeries","windSeries","gustSeries","rainSeries","rainAccumSeries","scheme","temp","pressure","wind","gust","rain","rainAccum","style","key","color","linkStyle","fontWeight","cursor","linkStyleActive","weather","state","tracker","mode","fontSize","setState","timerange","axisStyle","labelColor","event","get","max","up","label","symbolType","Component"],"mappings":"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","sourcesContent":["/**\n *  Copyright (c) 2015, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/* eslint max-len:0 */\n\nimport React from \"react\";\nimport _ from \"underscore\";\nimport Moment from \"moment\";\n\n// Pond\nimport { TimeSeries } from \"pondjs\";\n\n// Imports from the charts library\nimport {ChartContainer, ChartRow, Charts, YAxis, AreaChart, LineChart, ScatterChart, Resizable, Legend, styler} from \"react-timeseries-charts\";\n// import ChartRow from \"../../../../../components/ChartRow\";\n// import Charts from \"../../../../../components/Charts\";\n// import YAxis from \"../../../../../components/YAxis\";\n// import AreaChart from \"../../../../../components/AreaChart\";\n// import LineChart from \"../../../../../components/LineChart\";\n// import ScatterChart from \"../../../../../components/ScatterChart\";\n// import Resizable from \"../../../../../components/Resizable\";\n// import Legend from \"../../../../../components/Legend\";\n// import styler from \"../../../../../js/styler\";\n\n// Weather data\nimport weatherJSON from \"./weather.json\";\n\n//\n// Read in the weather data\n//\n\nconst temperaturePoints = [];\nconst pressurePoints = [];\nconst windPoints = [];\nconst gustPoints = [];\nconst rainPoints = [];\nconst rainAccumPoints = [];\n_.each(weatherJSON, readings => {\n    const time = new Moment(readings.Time).toDate().getTime();\n    const tempReading = readings.TemperatureF;\n    const pressureReading = readings[\"PressureIn\"];\n    const windReading = readings[\"WindSpeedMPH\"] === \"Calm\" ? 0 : readings[\"WindSpeedMPH\"];\n    const gustReading = readings[\"WindSpeedGustMPH\"];\n    const rainReading = readings[\"HourlyPrecipIn\"] === \"N/A\" ? 0 : readings[\"HourlyPrecipIn\"];\n    const rainAccumReading = readings[\"dailyrainin\"];\n\n    temperaturePoints.push([time, tempReading]);\n    pressurePoints.push([time, pressureReading]);\n\n    // Somewhat fake the wind speed...\n    windPoints.push([time, windReading * 5]);\n    if (gustReading !== \"-\" && gustReading !== 0) {\n        gustPoints.push([time, gustReading * 5 + Math.random() * 2.5 - 2.5, gustReading / 3]);\n    }\n    rainPoints.push([time, rainReading]);\n    rainAccumPoints.push([time, rainAccumReading]);\n});\n\n//\n// Timeseries\n//\n\nconst tempSeries = new TimeSeries({\n    name: \"Temperature\",\n    columns: [\"time\", \"temp\"],\n    points: temperaturePoints\n});\nconst pressureSeries = new TimeSeries({\n    name: \"Pressure\",\n    columns: [\"time\", \"pressure\"],\n    points: pressurePoints\n});\nconst windSeries = new TimeSeries({\n    name: \"Wind\",\n    columns: [\"time\", \"wind\"],\n    points: windPoints\n});\nconst gustSeries = new TimeSeries({\n    name: \"Gust\",\n    columns: [\"time\", \"gust\", \"radius\"],\n    points: gustPoints\n});\nconst rainSeries = new TimeSeries({\n    name: \"Rain\",\n    columns: [\"time\", \"rain\"],\n    points: rainPoints\n});\nconst rainAccumSeries = new TimeSeries({\n    name: \"Rain Accum\",\n    columns: [\"time\", \"rainAccum\"],\n    points: rainAccumPoints\n});\n\n//\n// Color scheme\n//\n\nconst scheme = {\n    temp: \"#CA4040\",\n    pressure: \"#9467bd\",\n    wind: \"#987951\",\n    gust: \"#CC862A\",\n    rain: \"#C3CBD4\",\n    rainAccum: \"#000\"\n};\n\nconst style = styler([\n    { key: \"temp\", color: \"#CA4040\" },\n    { key: \"pressure\", color: \"#9467bd\" },\n    { key: \"wind\", color: \"#987951\" },\n    { key: \"gust\", color: \"#CC862A\" },\n    { key: \"rain\", color: \"#C3CBD4\" },\n    { key: \"rainAccum\", color: \"#333\" }\n]);\n\nconst linkStyle = {\n    fontWeight: 600,\n    color: \"grey\",\n    cursor: \"default\"\n};\n\nconst linkStyleActive = {\n    color: \"steelblue\",\n    cursor: \"pointer\"\n};\n\n//\n// Render weather charts\n//\n\nclass weather extends React.Component {\n    state = {\n        tracker: null,\n        mode: \"local\"\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\" style={{ fontSize: 14, color: \"#777\" }}>\n                        <span\n                            style={this.state.mode === \"local\" ? linkStyleActive : linkStyle}\n                            onClick={() => this.setState({ mode: \"utc\" })}\n                        >\n                            UTC\n                        </span>\n                        <span> | </span>\n                        <span\n                            style={this.state.mode === \"utc\" ? linkStyleActive : linkStyle}\n                            onClick={() => this.setState({ mode: \"local\" })}\n                        >\n                            Local\n                        </span>\n                    </div>\n                </div>\n\n                <hr />\n\n                <div className=\"row\">\n                    <div className=\"col-md-10\">\n                        <Resizable>\n                            <ChartContainer\n                                utc={this.state.mode === \"utc\"}\n                                timeRange={tempSeries.timerange()}\n                                showGridPosition=\"under\"\n                                trackerPosition={this.state.tracker}\n                                trackerTimeFormat=\"%X\"\n                                onTrackerChanged={tracker => this.setState({ tracker })}\n                            >\n                                <ChartRow height=\"150\">\n                                    <YAxis\n                                        id=\"pressure\"\n                                        label=\"Pressure (in)\"\n                                        labelOffset={5}\n                                        style={style.axisStyle(\"pressure\")}\n                                        min={29.5}\n                                        max={30.0}\n                                        width=\"80\"\n                                        type=\"linear\"\n                                        format=\",.1f\"\n                                    />\n                                    <Charts>\n                                        <LineChart\n                                            axis=\"temp\"\n                                            series={tempSeries}\n                                            columns={[\"temp\"]}\n                                            style={style}\n                                        />\n                                        <LineChart\n                                            axis=\"pressure\"\n                                            series={pressureSeries}\n                                            columns={[\"pressure\"]}\n                                            style={style}\n                                        />\n                                    </Charts>\n                                    <YAxis\n                                        id=\"temp\"\n                                        label=\"Temperature (°F)\"\n                                        labelOffset={5}\n                                        style={style.axisStyle(\"temp\")}\n                                        min={50}\n                                        max={70}\n                                        width=\"80\"\n                                        type=\"linear\"\n                                        format=\",.1f\"\n                                    />\n                                </ChartRow>\n\n                                <ChartRow height=\"150\">\n                                    <YAxis\n                                        id=\"wind\"\n                                        label=\"Wind (mph)\"\n                                        labelOffset={5}\n                                        style={{ labelColor: scheme.wind }}\n                                        min={0}\n                                        max={50}\n                                        width=\"80\"\n                                        type=\"linear\"\n                                        format=\",.1f\"\n                                    />\n                                    <Charts>\n                                        <LineChart\n                                            axis=\"wind\"\n                                            series={windSeries}\n                                            columns={[\"wind\"]}\n                                            interpolation=\"curveStepBefore\"\n                                            style={style}\n                                        />\n                                        <ScatterChart\n                                            axis=\"wind-gust\"\n                                            series={gustSeries}\n                                            columns={[\"gust\"]}\n                                            style={style}\n                                            radius={event => {\n                                                return event.get(\"radius\");\n                                            }}\n                                        />\n                                    </Charts>\n                                    <YAxis\n                                        id=\"wind-gust\"\n                                        label=\"Wind gust (mph)\"\n                                        labelOffset={-5}\n                                        style={style.axisStyle(\"gust\")}\n                                        min={0}\n                                        max={50}\n                                        width=\"80\"\n                                        type=\"linear\"\n                                        format=\",.1f\"\n                                    />\n                                </ChartRow>\n\n                                <ChartRow height=\"150\">\n                                    <YAxis\n                                        id=\"total-rain\"\n                                        label=\"Total Precipitation (in)\"\n                                        style={style.axisStyle(\"rainAccum\")}\n                                        labelOffset={5}\n                                        min={0}\n                                        max={rainAccumSeries.max(\"rainAccum\")}\n                                        width=\"80\"\n                                        type=\"linear\"\n                                        format=\",.2f\"\n                                    />\n                                    <Charts>\n                                        <AreaChart\n                                            axis=\"rain\"\n                                            series={rainSeries}\n                                            columns={{ up: [\"rain\"] }}\n                                            style={style}\n                                            interpolation=\"curveBasis\"\n                                            fillOpacity={0.4}\n                                        />\n                                        <LineChart\n                                            axis=\"total-rain\"\n                                            series={rainAccumSeries}\n                                            columns={[\"rainAccum\"]}\n                                            style={style}\n                                        />\n                                    </Charts>\n                                    <YAxis\n                                        id=\"rain\"\n                                        label=\"Precipitation (in)\"\n                                        labelOffset={-5}\n                                        style={style.axisStyle(\"rain\")}\n                                        min={0}\n                                        max={rainSeries.max(\"rain\")}\n                                        width=\"80\"\n                                        type=\"linear\"\n                                        format=\",.2f\"\n                                    />\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                    <div className=\"col-md-2\">\n                        <Legend\n                            type=\"line\"\n                            align=\"right\"\n                            stack={true}\n                            style={style}\n                            categories={[\n                                { key: \"temp\", label: \"Temperature\" },\n                                { key: \"pressure\", label: \"Pressure\" },\n                                { key: \"wind\", label: \"Wind speed\" },\n                                { key: \"gust\", label: \"Gust speed\", symbolType: \"dot\" },\n                                { key: \"rain\", label: \"Rainfall\", symbolType: \"swatch\" },\n                                { key: \"rainAccum\", label: \"Accumulated rainfall\" }\n                            ]}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Export example\nexport default weather;"]},"metadata":{},"sourceType":"module"}